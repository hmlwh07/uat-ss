"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["default-node_modules_ngx-currency___ivy_ngcc___fesm2015_ngx-currency_js-src_app_core_global-f-461f33"],{

/***/ 40287:
/*!*************************************************************************!*\
  !*** ./node_modules/ngx-currency/__ivy_ngcc__/fesm2015/ngx-currency.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR": () => (/* binding */ CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR),
/* harmony export */   "CURRENCY_MASK_CONFIG": () => (/* binding */ CURRENCY_MASK_CONFIG),
/* harmony export */   "CurrencyMaskDirective": () => (/* binding */ CurrencyMaskDirective),
/* harmony export */   "CurrencyMaskInputMode": () => (/* binding */ CurrencyMaskInputMode),
/* harmony export */   "NgxCurrencyModule": () => (/* binding */ NgxCurrencyModule)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ 18346);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ 28267);





var CurrencyMaskInputMode;
(function (CurrencyMaskInputMode) {
    CurrencyMaskInputMode[CurrencyMaskInputMode["FINANCIAL"] = 0] = "FINANCIAL";
    CurrencyMaskInputMode[CurrencyMaskInputMode["NATURAL"] = 1] = "NATURAL";
})(CurrencyMaskInputMode || (CurrencyMaskInputMode = {}));
let CURRENCY_MASK_CONFIG = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken("currency.mask.config");

class InputManager {
    constructor(htmlInputElement) {
        this.htmlInputElement = htmlInputElement;
    }
    setCursorAt(position) {
        if (this.htmlInputElement.setSelectionRange) {
            this.htmlInputElement.focus();
            this.htmlInputElement.setSelectionRange(position, position);
        }
        else if (this.htmlInputElement.createTextRange) {
            let textRange = this.htmlInputElement.createTextRange();
            textRange.collapse(true);
            textRange.moveEnd("character", position);
            textRange.moveStart("character", position);
            textRange.select();
        }
    }
    updateValueAndCursor(newRawValue, oldLength, selectionStart) {
        this.rawValue = newRawValue;
        let newLength = newRawValue.length;
        selectionStart = selectionStart - (oldLength - newLength);
        this.setCursorAt(selectionStart);
    }
    get canInputMoreNumbers() {
        let onlyNumbers = this.rawValue.replace(/[^0-9\u0660-\u0669\u06F0-\u06F9]/g, "");
        let haventReachedMaxLength = !(onlyNumbers.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);
        let selectionStart = this.inputSelection.selectionStart;
        let selectionEnd = this.inputSelection.selectionEnd;
        let haveNumberSelected = !!(selectionStart != selectionEnd &&
            this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/[^0-9\u0660-\u0669\u06F0-\u06F9]/));
        let startWithZero = (this.htmlInputElement.value.substring(0, 1) == "0");
        return haventReachedMaxLength || haveNumberSelected || startWithZero;
    }
    get inputSelection() {
        let selectionStart = 0;
        let selectionEnd = 0;
        if (typeof this.htmlInputElement.selectionStart == "number" && typeof this.htmlInputElement.selectionEnd == "number") {
            selectionStart = this.htmlInputElement.selectionStart;
            selectionEnd = this.htmlInputElement.selectionEnd;
        }
        else {
            let range = document.selection.createRange();
            if (range && range.parentElement() == this.htmlInputElement) {
                let lenght = this.htmlInputElement.value.length;
                let normalizedValue = this.htmlInputElement.value.replace(/\r\n/g, "\n");
                let startRange = this.htmlInputElement.createTextRange();
                startRange.moveToBookmark(range.getBookmark());
                let endRange = this.htmlInputElement.createTextRange();
                endRange.collapse(false);
                if (startRange.compareEndPoints("StartToEnd", endRange) > -1) {
                    selectionStart = selectionEnd = lenght;
                }
                else {
                    selectionStart = -startRange.moveStart("character", -lenght);
                    selectionStart += normalizedValue.slice(0, selectionStart).split("\n").length - 1;
                    if (startRange.compareEndPoints("EndToEnd", endRange) > -1) {
                        selectionEnd = lenght;
                    }
                    else {
                        selectionEnd = -startRange.moveEnd("character", -lenght);
                        selectionEnd += normalizedValue.slice(0, selectionEnd).split("\n").length - 1;
                    }
                }
            }
        }
        return {
            selectionStart: selectionStart,
            selectionEnd: selectionEnd
        };
    }
    get rawValue() {
        return this.htmlInputElement && this.htmlInputElement.value;
    }
    set rawValue(value) {
        this._storedRawValue = value;
        if (this.htmlInputElement) {
            this.htmlInputElement.value = value;
        }
    }
    get storedRawValue() {
        return this._storedRawValue || '';
    }
}

class InputService {
    constructor(htmlInputElement, options) {
        this.htmlInputElement = htmlInputElement;
        this.options = options;
        this.SINGLE_DIGIT_REGEX = new RegExp(/^[0-9\u0660-\u0669\u06F0-\u06F9]$/);
        this.ONLY_NUMBERS_REGEX = new RegExp(/[^0-9\u0660-\u0669\u06F0-\u06F9]/g);
        this.PER_AR_NUMBER = new Map();
        this.inputManager = new InputManager(htmlInputElement);
        this.initialize();
    }
    initialize() {
        this.PER_AR_NUMBER.set("\u06F0", "0");
        this.PER_AR_NUMBER.set("\u06F1", "1");
        this.PER_AR_NUMBER.set("\u06F2", "2");
        this.PER_AR_NUMBER.set("\u06F3", "3");
        this.PER_AR_NUMBER.set("\u06F4", "4");
        this.PER_AR_NUMBER.set("\u06F5", "5");
        this.PER_AR_NUMBER.set("\u06F6", "6");
        this.PER_AR_NUMBER.set("\u06F7", "7");
        this.PER_AR_NUMBER.set("\u06F8", "8");
        this.PER_AR_NUMBER.set("\u06F9", "9");
        this.PER_AR_NUMBER.set("\u0660", "0");
        this.PER_AR_NUMBER.set("\u0661", "1");
        this.PER_AR_NUMBER.set("\u0662", "2");
        this.PER_AR_NUMBER.set("\u0663", "3");
        this.PER_AR_NUMBER.set("\u0664", "4");
        this.PER_AR_NUMBER.set("\u0665", "5");
        this.PER_AR_NUMBER.set("\u0666", "6");
        this.PER_AR_NUMBER.set("\u0667", "7");
        this.PER_AR_NUMBER.set("\u0668", "8");
        this.PER_AR_NUMBER.set("\u0669", "9");
    }
    addNumber(keyCode) {
        const { decimal, precision, inputMode } = this.options;
        let keyChar = String.fromCharCode(keyCode);
        const isDecimalChar = keyChar === this.options.decimal;
        if (!this.rawValue) {
            this.rawValue = this.applyMask(false, keyChar);
            let selectionStart = undefined;
            if (inputMode === CurrencyMaskInputMode.NATURAL && precision > 0) {
                selectionStart = this.rawValue.indexOf(decimal);
                if (isDecimalChar) {
                    selectionStart++;
                }
            }
            this.updateFieldValue(selectionStart);
        }
        else {
            let selectionStart = this.inputSelection.selectionStart;
            let selectionEnd = this.inputSelection.selectionEnd;
            const rawValueStart = this.rawValue.substring(0, selectionStart);
            let rawValueEnd = this.rawValue.substring(selectionEnd, this.rawValue.length);
            // In natural mode, replace decimals instead of shifting them.
            const inDecimalPortion = rawValueStart.indexOf(decimal) !== -1;
            if (inputMode === CurrencyMaskInputMode.NATURAL && inDecimalPortion && selectionStart === selectionEnd) {
                rawValueEnd = rawValueEnd.substring(1);
            }
            const newValue = rawValueStart + keyChar + rawValueEnd;
            let nextSelectionStart = selectionStart + 1;
            const isDecimalOrThousands = isDecimalChar || keyChar === this.options.thousands;
            if (isDecimalOrThousands && keyChar === rawValueEnd[0]) {
                // If the cursor is just before the decimal or thousands separator and the user types the
                // decimal or thousands separator, move the cursor past it.
                nextSelectionStart++;
            }
            else if (!this.SINGLE_DIGIT_REGEX.test(keyChar)) {
                // Ignore other non-numbers.
                return;
            }
            this.rawValue = newValue;
            this.updateFieldValue(nextSelectionStart);
        }
    }
    applyMask(isNumber, rawValue, disablePadAndTrim = false) {
        let { allowNegative, decimal, precision, prefix, suffix, thousands, min, max, inputMode } = this.options;
        rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;
        let onlyNumbers = rawValue.replace(this.ONLY_NUMBERS_REGEX, "");
        if (!onlyNumbers && rawValue !== decimal) {
            return "";
        }
        if (inputMode === CurrencyMaskInputMode.NATURAL && !isNumber && !disablePadAndTrim) {
            rawValue = this.padOrTrimPrecision(rawValue);
            onlyNumbers = rawValue.replace(this.ONLY_NUMBERS_REGEX, "");
        }
        let integerPart = onlyNumbers.slice(0, onlyNumbers.length - precision)
            .replace(/^\u0660*/g, "")
            .replace(/^\u06F0*/g, "")
            .replace(/^0*/g, "");
        if (integerPart == "") {
            integerPart = "0";
        }
        let integerValue = parseInt(integerPart);
        integerPart = integerPart.replace(/\B(?=([0-9\u0660-\u0669\u06F0-\u06F9]{3})+(?![0-9\u0660-\u0669\u06F0-\u06F9]))/g, thousands);
        if (thousands && integerPart.startsWith(thousands)) {
            integerPart = integerPart.substring(1);
        }
        let newRawValue = integerPart;
        let decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);
        let decimalValue = parseInt(decimalPart) || 0;
        let isNegative = rawValue.indexOf("-") > -1;
        // Ensure max is at least as large as min.
        max = (this.isNullOrUndefined(max) || this.isNullOrUndefined(min)) ? max : Math.max(max, min);
        // Ensure precision number works well with more than 2 digits
        // 23 / 100... 233 / 1000 and so on
        const divideBy = Number('1'.padEnd(precision + 1, '0'));
        // Restrict to the min and max values.
        let newValue = integerValue + (decimalValue / divideBy);
        newValue = isNegative ? -newValue : newValue;
        if (!this.isNullOrUndefined(max) && newValue > max) {
            return this.applyMask(true, max + '');
        }
        else if (!this.isNullOrUndefined(min) && newValue < min) {
            return this.applyMask(true, min + '');
        }
        if (precision > 0) {
            if (newRawValue == "0" && decimalPart.length < precision) {
                newRawValue += decimal + "0".repeat(precision - 1) + decimalPart;
            }
            else {
                newRawValue += decimal + decimalPart;
            }
        }
        let isZero = newValue == 0;
        let operator = (isNegative && allowNegative && !isZero) ? "-" : "";
        return operator + prefix + newRawValue + suffix;
    }
    padOrTrimPrecision(rawValue) {
        let { decimal, precision } = this.options;
        let decimalIndex = rawValue.lastIndexOf(decimal);
        if (decimalIndex === -1) {
            decimalIndex = rawValue.length;
            rawValue += decimal;
        }
        let decimalPortion = rawValue.substring(decimalIndex).replace(this.ONLY_NUMBERS_REGEX, "");
        const actualPrecision = decimalPortion.length;
        if (actualPrecision < precision) {
            for (let i = actualPrecision; i < precision; i++) {
                decimalPortion += '0';
            }
        }
        else if (actualPrecision > precision) {
            decimalPortion = decimalPortion.substring(0, decimalPortion.length + precision - actualPrecision);
        }
        return rawValue.substring(0, decimalIndex) + decimal + decimalPortion;
    }
    clearMask(rawValue) {
        if (this.isNullable() && rawValue === "")
            return null;
        let value = (rawValue || "0").replace(this.options.prefix, "").replace(this.options.suffix, "");
        if (this.options.thousands) {
            value = value.replace(new RegExp("\\" + this.options.thousands, "g"), "");
        }
        if (this.options.decimal) {
            value = value.replace(this.options.decimal, ".");
        }
        this.PER_AR_NUMBER.forEach((val, key) => {
            const re = new RegExp(key, "g");
            value = value.replace(re, val);
        });
        return parseFloat(value);
    }
    changeToNegative() {
        if (this.options.allowNegative && this.rawValue != "" && this.rawValue.charAt(0) != "-" && this.value != 0) {
            // Apply the mask to ensure the min and max values are enforced.
            this.rawValue = this.applyMask(false, "-" + this.rawValue);
        }
    }
    changeToPositive() {
        // Apply the mask to ensure the min and max values are enforced.
        this.rawValue = this.applyMask(false, this.rawValue.replace("-", ""));
    }
    removeNumber(keyCode) {
        let { decimal, thousands, prefix, suffix, inputMode } = this.options;
        if (this.isNullable() && this.value == 0) {
            this.rawValue = null;
            return;
        }
        let selectionEnd = this.inputSelection.selectionEnd;
        let selectionStart = this.inputSelection.selectionStart;
        const suffixStart = this.rawValue.length - suffix.length;
        selectionEnd = Math.min(suffixStart, Math.max(selectionEnd, prefix.length));
        selectionStart = Math.min(suffixStart, Math.max(selectionStart, prefix.length));
        // Check if selection was entirely in the prefix or suffix. 
        if (selectionStart === selectionEnd &&
            this.inputSelection.selectionStart !== this.inputSelection.selectionEnd) {
            this.updateFieldValue(selectionStart);
            return;
        }
        let decimalIndex = this.rawValue.indexOf(decimal);
        if (decimalIndex === -1) {
            decimalIndex = this.rawValue.length;
        }
        let shiftSelection = 0;
        let insertChars = '';
        const isCursorInDecimals = decimalIndex < selectionEnd;
        const isCursorImmediatelyAfterDecimalPoint = decimalIndex + 1 === selectionEnd;
        if (selectionEnd === selectionStart) {
            if (keyCode == 8) {
                if (selectionStart <= prefix.length) {
                    return;
                }
                selectionStart--;
                // If previous char isn't a number, go back one more.
                if (!this.rawValue.substr(selectionStart, 1).match(/\d/)) {
                    selectionStart--;
                }
                // In natural mode, jump backwards when in decimal portion of number.
                if (inputMode === CurrencyMaskInputMode.NATURAL && isCursorInDecimals) {
                    shiftSelection = -1;
                    // when removing a single whole number, replace it with 0
                    if (isCursorImmediatelyAfterDecimalPoint && this.value < 10 && this.value > -10) {
                        insertChars += '0';
                    }
                }
            }
            else if (keyCode == 46 || keyCode == 63272) {
                if (selectionStart === suffixStart) {
                    return;
                }
                selectionEnd++;
                // If next char isn't a number, go one more.
                if (!this.rawValue.substr(selectionStart, 1).match(/\d/)) {
                    selectionStart++;
                    selectionEnd++;
                }
            }
        }
        // In natural mode, replace decimals with 0s.
        if (inputMode === CurrencyMaskInputMode.NATURAL && selectionStart > decimalIndex) {
            const replacedDecimalCount = selectionEnd - selectionStart;
            for (let i = 0; i < replacedDecimalCount; i++) {
                insertChars += '0';
            }
        }
        let selectionFromEnd = this.rawValue.length - selectionEnd;
        this.rawValue = this.rawValue.substring(0, selectionStart) + insertChars + this.rawValue.substring(selectionEnd);
        // Remove leading thousand separator from raw value.
        const startChar = this.rawValue.substr(prefix.length, 1);
        if (startChar === thousands) {
            this.rawValue = this.rawValue.substring(0, prefix.length) + this.rawValue.substring(prefix.length + 1);
            selectionFromEnd = Math.min(selectionFromEnd, this.rawValue.length - prefix.length);
        }
        this.updateFieldValue(this.rawValue.length - selectionFromEnd + shiftSelection, true);
    }
    updateFieldValue(selectionStart, disablePadAndTrim = false) {
        let newRawValue = this.applyMask(false, this.rawValue || "", disablePadAndTrim);
        selectionStart = selectionStart == undefined ? this.rawValue.length : selectionStart;
        selectionStart = Math.max(this.options.prefix.length, Math.min(selectionStart, this.rawValue.length - this.options.suffix.length));
        this.inputManager.updateValueAndCursor(newRawValue, this.rawValue.length, selectionStart);
    }
    updateOptions(options) {
        let value = this.value;
        this.options = options;
        this.value = value;
    }
    prefixLength() {
        return this.options.prefix.length;
    }
    suffixLength() {
        return this.options.suffix.length;
    }
    isNullable() {
        return this.options.nullable;
    }
    get canInputMoreNumbers() {
        return this.inputManager.canInputMoreNumbers;
    }
    get inputSelection() {
        return this.inputManager.inputSelection;
    }
    get rawValue() {
        return this.inputManager.rawValue;
    }
    set rawValue(value) {
        this.inputManager.rawValue = value;
    }
    get storedRawValue() {
        return this.inputManager.storedRawValue;
    }
    get value() {
        return this.clearMask(this.rawValue);
    }
    set value(value) {
        this.rawValue = this.applyMask(true, "" + value);
    }
    isNullOrUndefined(value) {
        return value === null || value === undefined;
    }
}

class InputHandler {
    constructor(htmlInputElement, options) {
        this.inputService = new InputService(htmlInputElement, options);
    }
    handleCut(event) {
        setTimeout(() => {
            this.inputService.updateFieldValue();
            this.setValue(this.inputService.value);
            this.onModelChange(this.inputService.value);
        }, 0);
    }
    handleInput(event) {
        let selectionStart = this.inputService.inputSelection.selectionStart;
        let keyCode = this.inputService.rawValue.charCodeAt(selectionStart - 1);
        let rawValueLength = this.inputService.rawValue.length;
        let storedRawValueLength = this.inputService.storedRawValue.length;
        if (Math.abs(rawValueLength - storedRawValueLength) != 1) {
            this.inputService.updateFieldValue(selectionStart);
            this.onModelChange(this.inputService.value);
            return;
        }
        // Restore the old value.
        this.inputService.rawValue = this.inputService.storedRawValue;
        if (rawValueLength < storedRawValueLength) {
            // Chrome Android seems to move the cursor in response to a backspace AFTER processing the
            // input event, so we need to wrap this in a timeout.
            this.timer(() => {
                // Move the cursor to just after the deleted value.
                this.inputService.updateFieldValue(selectionStart + 1);
                // Then backspace it.
                this.inputService.removeNumber(8);
                this.onModelChange(this.inputService.value);
            }, 0);
        }
        if (rawValueLength > storedRawValueLength) {
            // Move the cursor to just before the new value.
            this.inputService.updateFieldValue(selectionStart - 1);
            // Process the character like a keypress.
            this.handleKeypressImpl(keyCode);
        }
    }
    handleKeydown(event) {
        let keyCode = event.which || event.charCode || event.keyCode;
        if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {
            event.preventDefault();
            if (this.inputService.inputSelection.selectionStart <= this.inputService.prefixLength() &&
                this.inputService.inputSelection.selectionEnd >= this.inputService.rawValue.length - this.inputService.suffixLength()) {
                this.clearValue();
            }
            else {
                this.inputService.removeNumber(keyCode);
                this.onModelChange(this.inputService.value);
            }
        }
    }
    clearValue() {
        this.setValue(this.inputService.isNullable() ? null : 0);
        this.onModelChange(this.inputService.value);
    }
    handleKeypress(event) {
        let keyCode = event.which || event.charCode || event.keyCode;
        event.preventDefault();
        if (keyCode === 97 && event.ctrlKey) {
            return;
        }
        this.handleKeypressImpl(keyCode);
    }
    handleKeypressImpl(keyCode) {
        switch (keyCode) {
            case undefined:
            case 9:
            case 13:
                return;
            case 43:
                this.inputService.changeToPositive();
                break;
            case 45:
                this.inputService.changeToNegative();
                break;
            default:
                if (this.inputService.canInputMoreNumbers) {
                    let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);
                    if (selectionRangeLength == this.inputService.rawValue.length) {
                        this.setValue(null);
                    }
                    this.inputService.addNumber(keyCode);
                }
                break;
        }
        this.onModelChange(this.inputService.value);
    }
    handlePaste(event) {
        setTimeout(() => {
            this.inputService.updateFieldValue();
            this.setValue(this.inputService.value);
            this.onModelChange(this.inputService.value);
        }, 1);
    }
    updateOptions(options) {
        this.inputService.updateOptions(options);
    }
    getOnModelChange() {
        return this.onModelChange;
    }
    setOnModelChange(callbackFunction) {
        this.onModelChange = callbackFunction;
    }
    getOnModelTouched() {
        return this.onModelTouched;
    }
    setOnModelTouched(callbackFunction) {
        this.onModelTouched = callbackFunction;
    }
    setValue(value) {
        this.inputService.value = value;
    }
    /**
     * Passthrough to setTimeout that can be stubbed out in tests.
     */
    timer(callback, delayMillis) {
        setTimeout(callback, delayMillis);
    }
}

const CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__.NG_VALUE_ACCESSOR,
    useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => CurrencyMaskDirective),
    multi: true,
};
class CurrencyMaskDirective {
    constructor(currencyMaskConfig, elementRef, keyValueDiffers) {
        this.currencyMaskConfig = currencyMaskConfig;
        this.elementRef = elementRef;
        this.keyValueDiffers = keyValueDiffers;
        this.options = {};
        this.optionsTemplate = {
            align: "right",
            allowNegative: true,
            allowZero: true,
            decimal: ".",
            precision: 2,
            prefix: "$ ",
            suffix: "",
            thousands: ",",
            nullable: false,
            inputMode: CurrencyMaskInputMode.FINANCIAL
        };
        if (currencyMaskConfig) {
            this.optionsTemplate = currencyMaskConfig;
        }
        this.keyValueDiffer = keyValueDiffers.find({}).create();
    }
    ngAfterViewInit() {
        this.elementRef.nativeElement.style.textAlign = this.options && this.options.align ? this.options.align : this.optionsTemplate.align;
    }
    ngDoCheck() {
        if (this.keyValueDiffer.diff(this.options)) {
            this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;
            this.inputHandler.updateOptions(Object.assign({}, this.optionsTemplate, this.options));
        }
    }
    ngOnInit() {
        this.inputHandler = new InputHandler(this.elementRef.nativeElement, Object.assign({}, this.optionsTemplate, this.options));
    }
    handleBlur(event) {
        this.inputHandler.getOnModelTouched().apply(event);
    }
    handleCut(event) {
        if (!this.isChromeAndroid()) {
            !this.isReadOnly() && this.inputHandler.handleCut(event);
        }
    }
    handleInput(event) {
        if (this.isChromeAndroid()) {
            !this.isReadOnly() && this.inputHandler.handleInput(event);
        }
    }
    handleKeydown(event) {
        if (!this.isChromeAndroid()) {
            !this.isReadOnly() && this.inputHandler.handleKeydown(event);
        }
    }
    handleKeypress(event) {
        if (!this.isChromeAndroid()) {
            !this.isReadOnly() && this.inputHandler.handleKeypress(event);
        }
    }
    handlePaste(event) {
        if (!this.isChromeAndroid()) {
            !this.isReadOnly() && this.inputHandler.handlePaste(event);
        }
    }
    handleDrop(event) {
        if (!this.isChromeAndroid()) {
            event.preventDefault();
        }
    }
    isChromeAndroid() {
        return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);
    }
    isReadOnly() {
        return this.elementRef.nativeElement.hasAttribute('readonly');
    }
    registerOnChange(callbackFunction) {
        this.inputHandler.setOnModelChange(callbackFunction);
    }
    registerOnTouched(callbackFunction) {
        this.inputHandler.setOnModelTouched(callbackFunction);
    }
    setDisabledState(value) {
        this.elementRef.nativeElement.disabled = value;
    }
    writeValue(value) {
        this.inputHandler.setValue(value);
    }
}
CurrencyMaskDirective.ɵfac = function CurrencyMaskDirective_Factory(t) { return new (t || CurrencyMaskDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](CURRENCY_MASK_CONFIG, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.KeyValueDiffers)); };
CurrencyMaskDirective.ɵdir = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({ type: CurrencyMaskDirective, selectors: [["", "currencyMask", ""]], hostBindings: function CurrencyMaskDirective_HostBindings(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("blur", function CurrencyMaskDirective_blur_HostBindingHandler($event) { return ctx.handleBlur($event); })("cut", function CurrencyMaskDirective_cut_HostBindingHandler($event) { return ctx.handleCut($event); })("input", function CurrencyMaskDirective_input_HostBindingHandler($event) { return ctx.handleInput($event); })("keydown", function CurrencyMaskDirective_keydown_HostBindingHandler($event) { return ctx.handleKeydown($event); })("keypress", function CurrencyMaskDirective_keypress_HostBindingHandler($event) { return ctx.handleKeypress($event); })("paste", function CurrencyMaskDirective_paste_HostBindingHandler($event) { return ctx.handlePaste($event); })("drop", function CurrencyMaskDirective_drop_HostBindingHandler($event) { return ctx.handleDrop($event); });
    } }, inputs: { options: "options" }, features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR])] });
CurrencyMaskDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject, args: [CURRENCY_MASK_CONFIG,] }] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.KeyValueDiffers }
];
CurrencyMaskDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject, args: [CURRENCY_MASK_CONFIG,] }] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.KeyValueDiffers }
];
CurrencyMaskDirective.propDecorators = {
    options: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input }],
    handleBlur: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener, args: ["blur", ["$event"],] }],
    handleCut: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener, args: ["cut", ["$event"],] }],
    handleInput: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener, args: ["input", ["$event"],] }],
    handleKeydown: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener, args: ["keydown", ["$event"],] }],
    handleKeypress: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener, args: ["keypress", ["$event"],] }],
    handlePaste: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener, args: ["paste", ["$event"],] }],
    handleDrop: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener, args: ["drop", ["$event"],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CurrencyMaskDirective, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
        args: [{
                selector: "[currencyMask]",
                providers: [CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR]
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
                type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
                args: [CURRENCY_MASK_CONFIG]
            }] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.KeyValueDiffers }]; }, { options: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
        }], handleBlur: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
            args: ["blur", ["$event"]]
        }], handleCut: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
            args: ["cut", ["$event"]]
        }], handleInput: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
            args: ["input", ["$event"]]
        }], handleKeydown: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
            args: ["keydown", ["$event"]]
        }], handleKeypress: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
            args: ["keypress", ["$event"]]
        }], handlePaste: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
            args: ["paste", ["$event"]]
        }], handleDrop: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
            args: ["drop", ["$event"]]
        }] }); })();

class NgxCurrencyModule {
    static forRoot(config) {
        return {
            ngModule: NgxCurrencyModule,
            providers: [{
                    provide: CURRENCY_MASK_CONFIG,
                    useValue: config,
                }]
        };
    }
}
NgxCurrencyModule.ɵfac = function NgxCurrencyModule_Factory(t) { return new (t || NgxCurrencyModule)(); };
NgxCurrencyModule.ɵmod = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({ type: NgxCurrencyModule });
NgxCurrencyModule.ɵinj = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({ imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_2__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_1__.FormsModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgxCurrencyModule, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
        args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_1__.FormsModule],
                declarations: [CurrencyMaskDirective],
                exports: [CurrencyMaskDirective]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](NgxCurrencyModule, { declarations: function () { return [CurrencyMaskDirective]; }, imports: function () { return [_angular_common__WEBPACK_IMPORTED_MODULE_2__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_1__.FormsModule]; }, exports: function () { return [CurrencyMaskDirective]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */





/***/ }),

/***/ 99785:
/*!******************************************!*\
  !*** ./src/app/core/const-data-value.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IN_BOUND": () => (/* binding */ IN_BOUND),
/* harmony export */   "OUT_BOUND": () => (/* binding */ OUT_BOUND)
/* harmony export */ });
const IN_BOUND = [
    { travel_plan: 'T-001', travel_duration: 'T-001', travel_unit: 'T-001', rate: 100 },
    { travel_plan: 'T-001', travel_duration: 'T-002', travel_unit: 'T-001', rate: 150 },
    { travel_plan: 'T-001', travel_duration: 'T-003', travel_unit: 'T-001', rate: 200 },
    { travel_plan: 'T-001', travel_duration: 'T-004', travel_unit: 'T-001', rate: 250 },
    { travel_plan: 'T-001', travel_duration: 'T-005', travel_unit: 'T-001', rate: 300 },
    { travel_plan: 'T-001', travel_duration: 'T-006', travel_unit: 'T-001', rate: 350 },
    { travel_plan: 'T-001', travel_duration: 'T-007', travel_unit: 'T-001', rate: 400 },
    { travel_plan: 'T-001', travel_duration: 'T-008', travel_unit: 'T-001', rate: 450 },
    { travel_plan: 'T-001', travel_duration: 'T-009', travel_unit: 'T-001', rate: 500 },
    { travel_plan: 'T-001', travel_duration: 'T-001', travel_unit: 'T-002', rate: 200 },
    { travel_plan: 'T-001', travel_duration: 'T-002', travel_unit: 'T-002', rate: 300 },
    { travel_plan: 'T-001', travel_duration: 'T-003', travel_unit: 'T-002', rate: 400 },
    { travel_plan: 'T-001', travel_duration: 'T-004', travel_unit: 'T-002', rate: 500 },
    { travel_plan: 'T-001', travel_duration: 'T-005', travel_unit: 'T-002', rate: 600 },
    { travel_plan: 'T-001', travel_duration: 'T-006', travel_unit: 'T-002', rate: 700 },
    { travel_plan: 'T-001', travel_duration: 'T-007', travel_unit: 'T-002', rate: 800 },
    { travel_plan: 'T-001', travel_duration: 'T-008', travel_unit: 'T-002', rate: 900 },
    { travel_plan: 'T-001', travel_duration: 'T-009', travel_unit: 'T-002', rate: 1000 },
    { travel_plan: 'T-001', travel_duration: 'T-001', travel_unit: 'T-003', rate: 300 },
    { travel_plan: 'T-001', travel_duration: 'T-002', travel_unit: 'T-003', rate: 450 },
    { travel_plan: 'T-001', travel_duration: 'T-003', travel_unit: 'T-003', rate: 600 },
    { travel_plan: 'T-001', travel_duration: 'T-004', travel_unit: 'T-003', rate: 750 },
    { travel_plan: 'T-001', travel_duration: 'T-005', travel_unit: 'T-003', rate: 900 },
    { travel_plan: 'T-001', travel_duration: 'T-006', travel_unit: 'T-003', rate: 1050 },
    { travel_plan: 'T-001', travel_duration: 'T-007', travel_unit: 'T-003', rate: 1200 },
    { travel_plan: 'T-001', travel_duration: 'T-008', travel_unit: 'T-003', rate: 1350 },
    { travel_plan: 'T-001', travel_duration: 'T-009', travel_unit: 'T-003', rate: 1500 },
    { travel_plan: 'T-001', travel_duration: 'T-001', travel_unit: 'T-004', rate: 400 },
    { travel_plan: 'T-001', travel_duration: 'T-002', travel_unit: 'T-004', rate: 600 },
    { travel_plan: 'T-001', travel_duration: 'T-003', travel_unit: 'T-004', rate: 800 },
    { travel_plan: 'T-001', travel_duration: 'T-004', travel_unit: 'T-004', rate: 1000 },
    { travel_plan: 'T-001', travel_duration: 'T-005', travel_unit: 'T-004', rate: 1200 },
    { travel_plan: 'T-001', travel_duration: 'T-006', travel_unit: 'T-004', rate: 1400 },
    { travel_plan: 'T-001', travel_duration: 'T-007', travel_unit: 'T-004', rate: 1600 },
    { travel_plan: 'T-001', travel_duration: 'T-008', travel_unit: 'T-004', rate: 1800 },
    { travel_plan: 'T-001', travel_duration: 'T-009', travel_unit: 'T-004', rate: 2000 },
    { travel_plan: 'T-001', travel_duration: 'T-001', travel_unit: 'T-005', rate: 500 },
    { travel_plan: 'T-001', travel_duration: 'T-002', travel_unit: 'T-005', rate: 750 },
    { travel_plan: 'T-001', travel_duration: 'T-003', travel_unit: 'T-005', rate: 1000 },
    { travel_plan: 'T-001', travel_duration: 'T-004', travel_unit: 'T-005', rate: 1250 },
    { travel_plan: 'T-001', travel_duration: 'T-005', travel_unit: 'T-005', rate: 1500 },
    { travel_plan: 'T-001', travel_duration: 'T-006', travel_unit: 'T-005', rate: 1750 },
    { travel_plan: 'T-001', travel_duration: 'T-007', travel_unit: 'T-005', rate: 2000 },
    { travel_plan: 'T-001', travel_duration: 'T-008', travel_unit: 'T-005', rate: 2250 },
    { travel_plan: 'T-001', travel_duration: 'T-009', travel_unit: 'T-005', rate: 2500 },
    { travel_plan: 'T-001', travel_duration: 'T-001', travel_unit: 'T-006', rate: 600 },
    { travel_plan: 'T-001', travel_duration: 'T-002', travel_unit: 'T-006', rate: 900 },
    { travel_plan: 'T-001', travel_duration: 'T-003', travel_unit: 'T-006', rate: 1200 },
    { travel_plan: 'T-001', travel_duration: 'T-004', travel_unit: 'T-006', rate: 1500 },
    { travel_plan: 'T-001', travel_duration: 'T-005', travel_unit: 'T-006', rate: 1800 },
    { travel_plan: 'T-001', travel_duration: 'T-006', travel_unit: 'T-006', rate: 2100 },
    { travel_plan: 'T-001', travel_duration: 'T-007', travel_unit: 'T-006', rate: 2400 },
    { travel_plan: 'T-001', travel_duration: 'T-008', travel_unit: 'T-006', rate: 2700 },
    { travel_plan: 'T-001', travel_duration: 'T-009', travel_unit: 'T-006', rate: 3000 },
    { travel_plan: 'T-001', travel_duration: 'T-001', travel_unit: 'T-007', rate: 700 },
    { travel_plan: 'T-001', travel_duration: 'T-002', travel_unit: 'T-007', rate: 1050 },
    { travel_plan: 'T-001', travel_duration: 'T-003', travel_unit: 'T-007', rate: 1400 },
    { travel_plan: 'T-001', travel_duration: 'T-004', travel_unit: 'T-007', rate: 1750 },
    { travel_plan: 'T-001', travel_duration: 'T-005', travel_unit: 'T-007', rate: 2100 },
    { travel_plan: 'T-001', travel_duration: 'T-006', travel_unit: 'T-007', rate: 2450 },
    { travel_plan: 'T-001', travel_duration: 'T-007', travel_unit: 'T-007', rate: 2800 },
    { travel_plan: 'T-001', travel_duration: 'T-008', travel_unit: 'T-007', rate: 3150 },
    { travel_plan: 'T-001', travel_duration: 'T-009', travel_unit: 'T-007', rate: 3500 },
    { travel_plan: 'T-001', travel_duration: 'T-001', travel_unit: 'T-008', rate: 800 },
    { travel_plan: 'T-001', travel_duration: 'T-002', travel_unit: 'T-008', rate: 1200 },
    { travel_plan: 'T-001', travel_duration: 'T-003', travel_unit: 'T-008', rate: 1600 },
    { travel_plan: 'T-001', travel_duration: 'T-004', travel_unit: 'T-008', rate: 2000 },
    { travel_plan: 'T-001', travel_duration: 'T-005', travel_unit: 'T-008', rate: 2400 },
    { travel_plan: 'T-001', travel_duration: 'T-006', travel_unit: 'T-008', rate: 2800 },
    { travel_plan: 'T-001', travel_duration: 'T-007', travel_unit: 'T-008', rate: 3200 },
    { travel_plan: 'T-001', travel_duration: 'T-008', travel_unit: 'T-008', rate: 3600 },
    { travel_plan: 'T-001', travel_duration: 'T-009', travel_unit: 'T-008', rate: 4000 },
    { travel_plan: 'T-001', travel_duration: 'T-001', travel_unit: 'T-009', rate: 900 },
    { travel_plan: 'T-001', travel_duration: 'T-002', travel_unit: 'T-009', rate: 1350 },
    { travel_plan: 'T-001', travel_duration: 'T-003', travel_unit: 'T-009', rate: 1800 },
    { travel_plan: 'T-001', travel_duration: 'T-004', travel_unit: 'T-009', rate: 2250 },
    { travel_plan: 'T-001', travel_duration: 'T-005', travel_unit: 'T-009', rate: 2700 },
    { travel_plan: 'T-001', travel_duration: 'T-006', travel_unit: 'T-009', rate: 3150 },
    { travel_plan: 'T-001', travel_duration: 'T-007', travel_unit: 'T-009', rate: 3600 },
    { travel_plan: 'T-001', travel_duration: 'T-008', travel_unit: 'T-009', rate: 4050 },
    { travel_plan: 'T-001', travel_duration: 'T-009', travel_unit: 'T-009', rate: 4500 },
    { travel_plan: 'T-001', travel_duration: 'T-001', travel_unit: 'T-010', rate: 1000 },
    { travel_plan: 'T-001', travel_duration: 'T-002', travel_unit: 'T-010', rate: 1500 },
    { travel_plan: 'T-001', travel_duration: 'T-003', travel_unit: 'T-010', rate: 2000 },
    { travel_plan: 'T-001', travel_duration: 'T-004', travel_unit: 'T-010', rate: 2500 },
    { travel_plan: 'T-001', travel_duration: 'T-005', travel_unit: 'T-010', rate: 3000 },
    { travel_plan: 'T-001', travel_duration: 'T-006', travel_unit: 'T-010', rate: 3500 },
    { travel_plan: 'T-001', travel_duration: 'T-007', travel_unit: 'T-010', rate: 4000 },
    { travel_plan: 'T-001', travel_duration: 'T-008', travel_unit: 'T-010', rate: 4500 },
    { travel_plan: 'T-001', travel_duration: 'T-009', travel_unit: 'T-010', rate: 5000 },
    { travel_plan: 'T-001', travel_duration: 'T-001', travel_unit: 'T-011', rate: 1100 },
    { travel_plan: 'T-001', travel_duration: 'T-002', travel_unit: 'T-011', rate: 1650 },
    { travel_plan: 'T-001', travel_duration: 'T-003', travel_unit: 'T-011', rate: 2200 },
    { travel_plan: 'T-001', travel_duration: 'T-004', travel_unit: 'T-011', rate: 2750 },
    { travel_plan: 'T-001', travel_duration: 'T-005', travel_unit: 'T-011', rate: 3300 },
    { travel_plan: 'T-001', travel_duration: 'T-006', travel_unit: 'T-011', rate: 3850 },
    { travel_plan: 'T-001', travel_duration: 'T-007', travel_unit: 'T-011', rate: 4400 },
    { travel_plan: 'T-001', travel_duration: 'T-008', travel_unit: 'T-011', rate: 4950 },
    { travel_plan: 'T-001', travel_duration: 'T-009', travel_unit: 'T-011', rate: 5500 },
    { travel_plan: 'T-001', travel_duration: 'T-001', travel_unit: 'T-012', rate: 1200 },
    { travel_plan: 'T-001', travel_duration: 'T-002', travel_unit: 'T-012', rate: 1800 },
    { travel_plan: 'T-001', travel_duration: 'T-003', travel_unit: 'T-012', rate: 2400 },
    { travel_plan: 'T-001', travel_duration: 'T-004', travel_unit: 'T-012', rate: 3000 },
    { travel_plan: 'T-001', travel_duration: 'T-005', travel_unit: 'T-012', rate: 3600 },
    { travel_plan: 'T-001', travel_duration: 'T-006', travel_unit: 'T-012', rate: 4200 },
    { travel_plan: 'T-001', travel_duration: 'T-007', travel_unit: 'T-012', rate: 4800 },
    { travel_plan: 'T-001', travel_duration: 'T-008', travel_unit: 'T-012', rate: 5400 },
    { travel_plan: 'T-001', travel_duration: 'T-009', travel_unit: 'T-012', rate: 6000 },
    { travel_plan: 'T-001', travel_duration: 'T-001', travel_unit: 'T-013', rate: 1300 },
    { travel_plan: 'T-001', travel_duration: 'T-002', travel_unit: 'T-013', rate: 1950 },
    { travel_plan: 'T-001', travel_duration: 'T-003', travel_unit: 'T-013', rate: 2600 },
    { travel_plan: 'T-001', travel_duration: 'T-004', travel_unit: 'T-013', rate: 3250 },
    { travel_plan: 'T-001', travel_duration: 'T-005', travel_unit: 'T-013', rate: 3900 },
    { travel_plan: 'T-001', travel_duration: 'T-006', travel_unit: 'T-013', rate: 4550 },
    { travel_plan: 'T-001', travel_duration: 'T-007', travel_unit: 'T-013', rate: 5200 },
    { travel_plan: 'T-001', travel_duration: 'T-008', travel_unit: 'T-013', rate: 5850 },
    { travel_plan: 'T-001', travel_duration: 'T-009', travel_unit: 'T-013', rate: 6500 },
    { travel_plan: 'T-001', travel_duration: 'T-001', travel_unit: 'T-014', rate: 1400 },
    { travel_plan: 'T-001', travel_duration: 'T-002', travel_unit: 'T-014', rate: 2100 },
    { travel_plan: 'T-001', travel_duration: 'T-003', travel_unit: 'T-014', rate: 2800 },
    { travel_plan: 'T-001', travel_duration: 'T-004', travel_unit: 'T-014', rate: 3500 },
    { travel_plan: 'T-001', travel_duration: 'T-005', travel_unit: 'T-014', rate: 4200 },
    { travel_plan: 'T-001', travel_duration: 'T-006', travel_unit: 'T-014', rate: 4900 },
    { travel_plan: 'T-001', travel_duration: 'T-007', travel_unit: 'T-014', rate: 5600 },
    { travel_plan: 'T-001', travel_duration: 'T-008', travel_unit: 'T-014', rate: 6300 },
    { travel_plan: 'T-001', travel_duration: 'T-009', travel_unit: 'T-014', rate: 7000 },
    { travel_plan: 'T-001', travel_duration: 'T-001', travel_unit: 'T-015', rate: 1500 },
    { travel_plan: 'T-001', travel_duration: 'T-002', travel_unit: 'T-015', rate: 2250 },
    { travel_plan: 'T-001', travel_duration: 'T-003', travel_unit: 'T-015', rate: 3000 },
    { travel_plan: 'T-001', travel_duration: 'T-004', travel_unit: 'T-015', rate: 3750 },
    { travel_plan: 'T-001', travel_duration: 'T-005', travel_unit: 'T-015', rate: 4500 },
    { travel_plan: 'T-001', travel_duration: 'T-006', travel_unit: 'T-015', rate: 5250 },
    { travel_plan: 'T-001', travel_duration: 'T-007', travel_unit: 'T-015', rate: 6000 },
    { travel_plan: 'T-001', travel_duration: 'T-008', travel_unit: 'T-015', rate: 6750 },
    { travel_plan: 'T-001', travel_duration: 'T-009', travel_unit: 'T-015', rate: 7500 },
    { travel_plan: 'T-001', travel_duration: 'T-001', travel_unit: 'T-016', rate: 1600 },
    { travel_plan: 'T-001', travel_duration: 'T-002', travel_unit: 'T-016', rate: 2400 },
    { travel_plan: 'T-001', travel_duration: 'T-003', travel_unit: 'T-016', rate: 3200 },
    { travel_plan: 'T-001', travel_duration: 'T-004', travel_unit: 'T-016', rate: 4000 },
    { travel_plan: 'T-001', travel_duration: 'T-005', travel_unit: 'T-016', rate: 4800 },
    { travel_plan: 'T-001', travel_duration: 'T-006', travel_unit: 'T-016', rate: 5600 },
    { travel_plan: 'T-001', travel_duration: 'T-007', travel_unit: 'T-016', rate: 6400 },
    { travel_plan: 'T-001', travel_duration: 'T-008', travel_unit: 'T-016', rate: 7200 },
    { travel_plan: 'T-001', travel_duration: 'T-009', travel_unit: 'T-016', rate: 8000 },
    { travel_plan: 'T-001', travel_duration: 'T-001', travel_unit: 'T-017', rate: 1700 },
    { travel_plan: 'T-001', travel_duration: 'T-002', travel_unit: 'T-017', rate: 2550 },
    { travel_plan: 'T-001', travel_duration: 'T-003', travel_unit: 'T-017', rate: 3400 },
    { travel_plan: 'T-001', travel_duration: 'T-004', travel_unit: 'T-017', rate: 4250 },
    { travel_plan: 'T-001', travel_duration: 'T-005', travel_unit: 'T-017', rate: 5100 },
    { travel_plan: 'T-001', travel_duration: 'T-006', travel_unit: 'T-017', rate: 5950 },
    { travel_plan: 'T-001', travel_duration: 'T-007', travel_unit: 'T-017', rate: 6800 },
    { travel_plan: 'T-001', travel_duration: 'T-008', travel_unit: 'T-017', rate: 7650 },
    { travel_plan: 'T-001', travel_duration: 'T-009', travel_unit: 'T-017', rate: 8500 },
    { travel_plan: 'T-001', travel_duration: 'T-001', travel_unit: 'T-018', rate: 1800 },
    { travel_plan: 'T-001', travel_duration: 'T-002', travel_unit: 'T-018', rate: 2700 },
    { travel_plan: 'T-001', travel_duration: 'T-003', travel_unit: 'T-018', rate: 3600 },
    { travel_plan: 'T-001', travel_duration: 'T-004', travel_unit: 'T-018', rate: 4500 },
    { travel_plan: 'T-001', travel_duration: 'T-005', travel_unit: 'T-018', rate: 5400 },
    { travel_plan: 'T-001', travel_duration: 'T-006', travel_unit: 'T-018', rate: 6300 },
    { travel_plan: 'T-001', travel_duration: 'T-007', travel_unit: 'T-018', rate: 7200 },
    { travel_plan: 'T-001', travel_duration: 'T-008', travel_unit: 'T-018', rate: 8100 },
    { travel_plan: 'T-001', travel_duration: 'T-009', travel_unit: 'T-018', rate: 9000 },
    { travel_plan: 'T-001', travel_duration: 'T-001', travel_unit: 'T-019', rate: 1900 },
    { travel_plan: 'T-001', travel_duration: 'T-002', travel_unit: 'T-019', rate: 2850 },
    { travel_plan: 'T-001', travel_duration: 'T-003', travel_unit: 'T-019', rate: 3800 },
    { travel_plan: 'T-001', travel_duration: 'T-004', travel_unit: 'T-019', rate: 4750 },
    { travel_plan: 'T-001', travel_duration: 'T-005', travel_unit: 'T-019', rate: 5700 },
    { travel_plan: 'T-001', travel_duration: 'T-006', travel_unit: 'T-019', rate: 6650 },
    { travel_plan: 'T-001', travel_duration: 'T-007', travel_unit: 'T-019', rate: 7600 },
    { travel_plan: 'T-001', travel_duration: 'T-008', travel_unit: 'T-019', rate: 8550 },
    { travel_plan: 'T-001', travel_duration: 'T-009', travel_unit: 'T-019', rate: 9500 },
    { travel_plan: 'T-001', travel_duration: 'T-001', travel_unit: 'T-020', rate: 2000 },
    { travel_plan: 'T-001', travel_duration: 'T-002', travel_unit: 'T-020', rate: 3000 },
    { travel_plan: 'T-001', travel_duration: 'T-003', travel_unit: 'T-020', rate: 4000 },
    { travel_plan: 'T-001', travel_duration: 'T-004', travel_unit: 'T-020', rate: 5000 },
    { travel_plan: 'T-001', travel_duration: 'T-005', travel_unit: 'T-020', rate: 6000 },
    { travel_plan: 'T-001', travel_duration: 'T-006', travel_unit: 'T-020', rate: 7000 },
    { travel_plan: 'T-001', travel_duration: 'T-007', travel_unit: 'T-020', rate: 8000 },
    { travel_plan: 'T-001', travel_duration: 'T-008', travel_unit: 'T-020', rate: 9000 },
    { travel_plan: 'T-001', travel_duration: 'T-009', travel_unit: 'T-020', rate: 10000 },
];
const OUT_BOUND = [
    { travel_plan: 'T-002', travel_duration: 'T-010', travel_unit: 'T-001', rate: 200 },
    { travel_plan: 'T-002', travel_duration: 'T-011', travel_unit: 'T-001', rate: 250 },
    { travel_plan: 'T-002', travel_duration: 'T-012', travel_unit: 'T-001', rate: 300 },
    { travel_plan: 'T-002', travel_duration: 'T-013', travel_unit: 'T-001', rate: 350 },
    { travel_plan: 'T-002', travel_duration: 'T-014', travel_unit: 'T-001', rate: 400 },
    { travel_plan: 'T-002', travel_duration: 'T-015', travel_unit: 'T-001', rate: 450 },
    { travel_plan: 'T-002', travel_duration: 'T-016', travel_unit: 'T-001', rate: 500 },
    { travel_plan: 'T-002', travel_duration: 'T-010', travel_unit: 'T-002', rate: 400 },
    { travel_plan: 'T-002', travel_duration: 'T-011', travel_unit: 'T-002', rate: 500 },
    { travel_plan: 'T-002', travel_duration: 'T-012', travel_unit: 'T-002', rate: 600 },
    { travel_plan: 'T-002', travel_duration: 'T-013', travel_unit: 'T-002', rate: 700 },
    { travel_plan: 'T-002', travel_duration: 'T-014', travel_unit: 'T-002', rate: 800 },
    { travel_plan: 'T-002', travel_duration: 'T-015', travel_unit: 'T-002', rate: 900 },
    { travel_plan: 'T-002', travel_duration: 'T-016', travel_unit: 'T-002', rate: 1000 },
    { travel_plan: 'T-002', travel_duration: 'T-010', travel_unit: 'T-003', rate: 600 },
    { travel_plan: 'T-002', travel_duration: 'T-011', travel_unit: 'T-003', rate: 750 },
    { travel_plan: 'T-002', travel_duration: 'T-012', travel_unit: 'T-003', rate: 900 },
    { travel_plan: 'T-002', travel_duration: 'T-013', travel_unit: 'T-003', rate: 1050 },
    { travel_plan: 'T-002', travel_duration: 'T-014', travel_unit: 'T-003', rate: 1200 },
    { travel_plan: 'T-002', travel_duration: 'T-015', travel_unit: 'T-003', rate: 1350 },
    { travel_plan: 'T-002', travel_duration: 'T-016', travel_unit: 'T-003', rate: 1500 },
    { travel_plan: 'T-002', travel_duration: 'T-010', travel_unit: 'T-004', rate: 800 },
    { travel_plan: 'T-002', travel_duration: 'T-011', travel_unit: 'T-004', rate: 1000 },
    { travel_plan: 'T-002', travel_duration: 'T-012', travel_unit: 'T-004', rate: 1200 },
    { travel_plan: 'T-002', travel_duration: 'T-013', travel_unit: 'T-004', rate: 1400 },
    { travel_plan: 'T-002', travel_duration: 'T-014', travel_unit: 'T-004', rate: 1600 },
    { travel_plan: 'T-002', travel_duration: 'T-015', travel_unit: 'T-004', rate: 1800 },
    { travel_plan: 'T-002', travel_duration: 'T-016', travel_unit: 'T-004', rate: 2000 },
    { travel_plan: 'T-002', travel_duration: 'T-010', travel_unit: 'T-005', rate: 1000 },
    { travel_plan: 'T-002', travel_duration: 'T-011', travel_unit: 'T-005', rate: 1250 },
    { travel_plan: 'T-002', travel_duration: 'T-012', travel_unit: 'T-005', rate: 1500 },
    { travel_plan: 'T-002', travel_duration: 'T-013', travel_unit: 'T-005', rate: 1750 },
    { travel_plan: 'T-002', travel_duration: 'T-014', travel_unit: 'T-005', rate: 2000 },
    { travel_plan: 'T-002', travel_duration: 'T-015', travel_unit: 'T-005', rate: 2250 },
    { travel_plan: 'T-002', travel_duration: 'T-016', travel_unit: 'T-005', rate: 2500 },
    { travel_plan: 'T-002', travel_duration: 'T-010', travel_unit: 'T-006', rate: 1200 },
    { travel_plan: 'T-002', travel_duration: 'T-011', travel_unit: 'T-006', rate: 1500 },
    { travel_plan: 'T-002', travel_duration: 'T-012', travel_unit: 'T-006', rate: 1800 },
    { travel_plan: 'T-002', travel_duration: 'T-013', travel_unit: 'T-006', rate: 2100 },
    { travel_plan: 'T-002', travel_duration: 'T-014', travel_unit: 'T-006', rate: 2400 },
    { travel_plan: 'T-002', travel_duration: 'T-015', travel_unit: 'T-006', rate: 2700 },
    { travel_plan: 'T-002', travel_duration: 'T-016', travel_unit: 'T-006', rate: 3000 },
    { travel_plan: 'T-002', travel_duration: 'T-010', travel_unit: 'T-007', rate: 1400 },
    { travel_plan: 'T-002', travel_duration: 'T-011', travel_unit: 'T-007', rate: 1750 },
    { travel_plan: 'T-002', travel_duration: 'T-012', travel_unit: 'T-007', rate: 2100 },
    { travel_plan: 'T-002', travel_duration: 'T-013', travel_unit: 'T-007', rate: 2450 },
    { travel_plan: 'T-002', travel_duration: 'T-014', travel_unit: 'T-007', rate: 2800 },
    { travel_plan: 'T-002', travel_duration: 'T-015', travel_unit: 'T-007', rate: 3150 },
    { travel_plan: 'T-002', travel_duration: 'T-016', travel_unit: 'T-007', rate: 3500 },
    { travel_plan: 'T-002', travel_duration: 'T-010', travel_unit: 'T-008', rate: 1600 },
    { travel_plan: 'T-002', travel_duration: 'T-011', travel_unit: 'T-008', rate: 2000 },
    { travel_plan: 'T-002', travel_duration: 'T-012', travel_unit: 'T-008', rate: 2400 },
    { travel_plan: 'T-002', travel_duration: 'T-013', travel_unit: 'T-008', rate: 2800 },
    { travel_plan: 'T-002', travel_duration: 'T-014', travel_unit: 'T-008', rate: 3200 },
    { travel_plan: 'T-002', travel_duration: 'T-015', travel_unit: 'T-008', rate: 3600 },
    { travel_plan: 'T-002', travel_duration: 'T-016', travel_unit: 'T-008', rate: 4000 },
    { travel_plan: 'T-002', travel_duration: 'T-010', travel_unit: 'T-009', rate: 1800 },
    { travel_plan: 'T-002', travel_duration: 'T-011', travel_unit: 'T-009', rate: 2250 },
    { travel_plan: 'T-002', travel_duration: 'T-012', travel_unit: 'T-009', rate: 2700 },
    { travel_plan: 'T-002', travel_duration: 'T-013', travel_unit: 'T-009', rate: 3150 },
    { travel_plan: 'T-002', travel_duration: 'T-014', travel_unit: 'T-009', rate: 3600 },
    { travel_plan: 'T-002', travel_duration: 'T-015', travel_unit: 'T-009', rate: 4050 },
    { travel_plan: 'T-002', travel_duration: 'T-016', travel_unit: 'T-009', rate: 4500 },
    { travel_plan: 'T-002', travel_duration: 'T-010', travel_unit: 'T-010', rate: 2000 },
    { travel_plan: 'T-002', travel_duration: 'T-011', travel_unit: 'T-010', rate: 2500 },
    { travel_plan: 'T-002', travel_duration: 'T-012', travel_unit: 'T-010', rate: 3000 },
    { travel_plan: 'T-002', travel_duration: 'T-013', travel_unit: 'T-010', rate: 3500 },
    { travel_plan: 'T-002', travel_duration: 'T-014', travel_unit: 'T-010', rate: 4000 },
    { travel_plan: 'T-002', travel_duration: 'T-015', travel_unit: 'T-010', rate: 4500 },
    { travel_plan: 'T-002', travel_duration: 'T-016', travel_unit: 'T-010', rate: 5000 },
    { travel_plan: 'T-002', travel_duration: 'T-010', travel_unit: 'T-011', rate: 2200 },
    { travel_plan: 'T-002', travel_duration: 'T-011', travel_unit: 'T-011', rate: 2750 },
    { travel_plan: 'T-002', travel_duration: 'T-012', travel_unit: 'T-011', rate: 3300 },
    { travel_plan: 'T-002', travel_duration: 'T-013', travel_unit: 'T-011', rate: 3850 },
    { travel_plan: 'T-002', travel_duration: 'T-014', travel_unit: 'T-011', rate: 4400 },
    { travel_plan: 'T-002', travel_duration: 'T-015', travel_unit: 'T-011', rate: 4950 },
    { travel_plan: 'T-002', travel_duration: 'T-016', travel_unit: 'T-011', rate: 5500 },
    { travel_plan: 'T-002', travel_duration: 'T-010', travel_unit: 'T-012', rate: 2400 },
    { travel_plan: 'T-002', travel_duration: 'T-011', travel_unit: 'T-012', rate: 3000 },
    { travel_plan: 'T-002', travel_duration: 'T-012', travel_unit: 'T-012', rate: 3600 },
    { travel_plan: 'T-002', travel_duration: 'T-013', travel_unit: 'T-012', rate: 4200 },
    { travel_plan: 'T-002', travel_duration: 'T-014', travel_unit: 'T-012', rate: 4800 },
    { travel_plan: 'T-002', travel_duration: 'T-015', travel_unit: 'T-012', rate: 5400 },
    { travel_plan: 'T-002', travel_duration: 'T-016', travel_unit: 'T-012', rate: 6000 },
    { travel_plan: 'T-002', travel_duration: 'T-010', travel_unit: 'T-013', rate: 2600 },
    { travel_plan: 'T-002', travel_duration: 'T-011', travel_unit: 'T-013', rate: 3250 },
    { travel_plan: 'T-002', travel_duration: 'T-012', travel_unit: 'T-013', rate: 3900 },
    { travel_plan: 'T-002', travel_duration: 'T-013', travel_unit: 'T-013', rate: 4550 },
    { travel_plan: 'T-002', travel_duration: 'T-014', travel_unit: 'T-013', rate: 5200 },
    { travel_plan: 'T-002', travel_duration: 'T-015', travel_unit: 'T-013', rate: 5850 },
    { travel_plan: 'T-002', travel_duration: 'T-016', travel_unit: 'T-013', rate: 6500 },
    { travel_plan: 'T-002', travel_duration: 'T-010', travel_unit: 'T-014', rate: 2800 },
    { travel_plan: 'T-002', travel_duration: 'T-011', travel_unit: 'T-014', rate: 3500 },
    { travel_plan: 'T-002', travel_duration: 'T-012', travel_unit: 'T-014', rate: 4200 },
    { travel_plan: 'T-002', travel_duration: 'T-013', travel_unit: 'T-014', rate: 4900 },
    { travel_plan: 'T-002', travel_duration: 'T-014', travel_unit: 'T-014', rate: 5600 },
    { travel_plan: 'T-002', travel_duration: 'T-015', travel_unit: 'T-014', rate: 6300 },
    { travel_plan: 'T-002', travel_duration: 'T-016', travel_unit: 'T-014', rate: 7000 },
    { travel_plan: 'T-002', travel_duration: 'T-010', travel_unit: 'T-015', rate: 3000 },
    { travel_plan: 'T-002', travel_duration: 'T-011', travel_unit: 'T-015', rate: 3750 },
    { travel_plan: 'T-002', travel_duration: 'T-012', travel_unit: 'T-015', rate: 4500 },
    { travel_plan: 'T-002', travel_duration: 'T-013', travel_unit: 'T-015', rate: 5250 },
    { travel_plan: 'T-002', travel_duration: 'T-014', travel_unit: 'T-015', rate: 6000 },
    { travel_plan: 'T-002', travel_duration: 'T-015', travel_unit: 'T-015', rate: 6750 },
    { travel_plan: 'T-002', travel_duration: 'T-016', travel_unit: 'T-015', rate: 7500 },
    { travel_plan: 'T-002', travel_duration: 'T-010', travel_unit: 'T-016', rate: 3200 },
    { travel_plan: 'T-002', travel_duration: 'T-011', travel_unit: 'T-016', rate: 4000 },
    { travel_plan: 'T-002', travel_duration: 'T-012', travel_unit: 'T-016', rate: 4800 },
    { travel_plan: 'T-002', travel_duration: 'T-013', travel_unit: 'T-016', rate: 5600 },
    { travel_plan: 'T-002', travel_duration: 'T-014', travel_unit: 'T-016', rate: 6400 },
    { travel_plan: 'T-002', travel_duration: 'T-015', travel_unit: 'T-016', rate: 7200 },
    { travel_plan: 'T-002', travel_duration: 'T-016', travel_unit: 'T-016', rate: 8000 },
    { travel_plan: 'T-002', travel_duration: 'T-010', travel_unit: 'T-017', rate: 3400 },
    { travel_plan: 'T-002', travel_duration: 'T-011', travel_unit: 'T-017', rate: 4250 },
    { travel_plan: 'T-002', travel_duration: 'T-012', travel_unit: 'T-017', rate: 5100 },
    { travel_plan: 'T-002', travel_duration: 'T-013', travel_unit: 'T-017', rate: 5950 },
    { travel_plan: 'T-002', travel_duration: 'T-014', travel_unit: 'T-017', rate: 6800 },
    { travel_plan: 'T-002', travel_duration: 'T-015', travel_unit: 'T-017', rate: 7650 },
    { travel_plan: 'T-002', travel_duration: 'T-016', travel_unit: 'T-017', rate: 8500 },
    { travel_plan: 'T-002', travel_duration: 'T-010', travel_unit: 'T-018', rate: 3600 },
    { travel_plan: 'T-002', travel_duration: 'T-011', travel_unit: 'T-018', rate: 4500 },
    { travel_plan: 'T-002', travel_duration: 'T-012', travel_unit: 'T-018', rate: 5400 },
    { travel_plan: 'T-002', travel_duration: 'T-013', travel_unit: 'T-018', rate: 6300 },
    { travel_plan: 'T-002', travel_duration: 'T-014', travel_unit: 'T-018', rate: 7200 },
    { travel_plan: 'T-002', travel_duration: 'T-015', travel_unit: 'T-018', rate: 8100 },
    { travel_plan: 'T-002', travel_duration: 'T-016', travel_unit: 'T-018', rate: 9000 },
    { travel_plan: 'T-002', travel_duration: 'T-010', travel_unit: 'T-019', rate: 3800 },
    { travel_plan: 'T-002', travel_duration: 'T-011', travel_unit: 'T-019', rate: 4750 },
    { travel_plan: 'T-002', travel_duration: 'T-012', travel_unit: 'T-019', rate: 5700 },
    { travel_plan: 'T-002', travel_duration: 'T-013', travel_unit: 'T-019', rate: 6650 },
    { travel_plan: 'T-002', travel_duration: 'T-014', travel_unit: 'T-019', rate: 7600 },
    { travel_plan: 'T-002', travel_duration: 'T-015', travel_unit: 'T-019', rate: 8550 },
    { travel_plan: 'T-002', travel_duration: 'T-016', travel_unit: 'T-019', rate: 9500 },
    { travel_plan: 'T-002', travel_duration: 'T-010', travel_unit: 'T-020', rate: 4000 },
    { travel_plan: 'T-002', travel_duration: 'T-011', travel_unit: 'T-020', rate: 5000 },
    { travel_plan: 'T-002', travel_duration: 'T-012', travel_unit: 'T-020', rate: 6000 },
    { travel_plan: 'T-002', travel_duration: 'T-013', travel_unit: 'T-020', rate: 7000 },
    { travel_plan: 'T-002', travel_duration: 'T-014', travel_unit: 'T-020', rate: 8000 },
    { travel_plan: 'T-002', travel_duration: 'T-015', travel_unit: 'T-020', rate: 9000 },
    { travel_plan: 'T-002', travel_duration: 'T-016', travel_unit: 'T-020', rate: 10000 },
];
// 
// 001 inb  // 002 outb


/***/ }),

/***/ 73762:
/*!********************************************!*\
  !*** ./src/app/core/global-fun.service.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GlobalFunctionService": () => (/* binding */ GlobalFunctionService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/common */ 28267);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ 58824);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ 24575);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs */ 28433);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ 2014);
/* harmony import */ var _modules_loading_toast_alert_model_alert_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/loading-toast/alert-model/alert.service */ 60940);
/* harmony import */ var _pages_currency_exchange_currency_exchange_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../pages/currency-exchange/currency-exchange.service */ 19113);
/* harmony import */ var _const_data_value__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./const-data-value */ 99785);
/* harmony import */ var _rate_datas_motor_rate_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rate-datas/motor-rate.service */ 76545);









let GlobalFunctionService = class GlobalFunctionService {
    constructor(numberPipe, alert, exChangeService, motorService) {
        this.numberPipe = numberPipe;
        this.alert = alert;
        this.exChangeService = exChangeService;
        this.motorService = motorService;
        this.testingFunResult = new rxjs__WEBPACK_IMPORTED_MODULE_4__.BehaviorSubject(null);
        this.paPremiumResult = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Subject();
        this.smSumInsuredAmtResult = new rxjs__WEBPACK_IMPORTED_MODULE_4__.BehaviorSubject(null);
        this.paCoverageResult = new rxjs__WEBPACK_IMPORTED_MODULE_4__.BehaviorSubject(null);
        this.normalCoverageResult = new rxjs__WEBPACK_IMPORTED_MODULE_4__.BehaviorSubject(null);
        this.motorTotalSiResult = new rxjs__WEBPACK_IMPORTED_MODULE_4__.BehaviorSubject(null);
        this.paPolicyValidationResult = new rxjs__WEBPACK_IMPORTED_MODULE_4__.BehaviorSubject(null);
        this.tempFormData = {};
        this.exChange = 1650;
        this.optionResultChange = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Subject();
    }
    getRate(type) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            if (!type)
                return false;
            try {
                let curType = type.toLowerCase();
                let res = yield this.exChangeService.getByType(curType).toPromise();
                if (res) {
                    return res.amount;
                }
            }
            catch (error) {
            }
        });
    }
    testingFun() {
        console.log("fun was called");
        this.testingFunResult.next('value testing');
    }
    motorFormValidation(currentValue, activeForm, option, form) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            let total = activeForm['total_risk_si'];
            let validAmt = 20000000;
            let excess = activeForm['excess'];
            let currency = activeForm['currency'];
            console.log(validAmt, total);
            if (excess == "T-003" && currency == "mmk") {
                if (total > validAmt) {
                    return true;
                }
                else {
                    this.alert.activate("Sum Insured amount should be greater than 20,000,000 MMK to have Excess Discount", "Validation");
                    return false;
                }
            }
            return true;
        });
    }
    paPremiumCalculation(currentValue, activeForm, option, form) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            //console.log("call paPremiumCalculation",activeForm);
            let currency = "";
            // let term = "0"
            let sumIn = 0;
            if (form)
                if (!this.sumInsuredValidation("form", activeForm, [], true)) {
                    return false;
                }
            // if (activeForm.pa_policy_term) {
            //   term = activeForm.pa_policy_term
            // } else if (this.tempFormData['pa_product_detail']) {
            //   term = this.tempFormData['pa_product_detail']['pa_policy_term'] || 0
            // }
            if (activeForm.sum_insured) {
                sumIn = activeForm.sum_insured;
            }
            if (activeForm.currency) {
                currency = activeForm.currency;
            }
            let fector = 1;
            let getMonth = 12;
            // if (term == '001') {
            //   fector = 1 / 4
            //   getMonth = 3
            // } else if (term == '002') {
            //   fector = 1 / 2
            //   getMonth = 6
            // }
            // let exChange = await this.getRate(currency)
            // if (exChange < 0) return false
            let stumDuty = currency == "MMK" ? 100 : 1;
            let result = this.calculateDecimal((sumIn * (0.7 / 100)) / getMonth) + stumDuty;
            // if()
            this.paPremiumResult.next(this.numberPipe.transform(result) + " " + currency + " / month");
            return true;
        });
    }
    sumInsuredValidation(currentValue, activeForm, option, form) {
        console.log("call sumInsuredValidation", activeForm, form);
        let currency = "";
        let sumIn = 0;
        if (activeForm.currency) {
            currency = activeForm.currency;
        }
        if (activeForm.sum_insured) {
            sumIn = activeForm.sum_insured;
        }
        if (currency == 'MMK') {
            if (500000 <= sumIn && sumIn <= 20000000) {
                return true;
            }
            else {
                if (form)
                    this.alert.activate("Sum Insured must be between 500000 MMK and  20000000 MMK", "Validation");
                return false;
            }
        }
        else if (currency == 'USD') {
            if (1000 <= sumIn && sumIn <= 10000) {
                return true;
            }
            else {
                if (form)
                    this.alert.activate("Sum Insured must be between 1000 USD and  10000 USD", "Validation");
                return false;
            }
        }
        return false;
    }
    motorTotalSi(currentValue, activeForm, option, form) {
        let vehicle_si = 0;
        let trailer_one_si = 0;
        let trailer_two_si = 0;
        let trailer_three_si = 0;
        if (activeForm.vehicle_si) {
            vehicle_si = parseInt(activeForm.vehicle_si);
        }
        if (activeForm.trailer_one_si) {
            trailer_one_si = parseInt(activeForm.trailer_one_si);
        }
        if (activeForm.trailer_two_si) {
            trailer_two_si = parseInt(activeForm.trailer_two_si);
        }
        if (activeForm.trailer_three_si) {
            trailer_three_si = parseInt(activeForm.trailer_three_si);
        }
        this.motorTotalSiResult.next(vehicle_si + trailer_one_si + trailer_two_si + trailer_three_si);
    }
    farmerPremium(currentValue, activeForm, option, form) {
        let sumIn = 0;
        let rate = 0.01;
        if (activeForm.sum_insured) {
            sumIn = activeForm.sum_insured;
        }
        else if (this.tempFormData['farmer_product_detail']) {
            sumIn = this.tempFormData['farmer_product_detail']['sum_insured'] || 0;
        }
        let calculatedAmt = sumIn * rate;
        this.paPremiumResult.next(this.numberPipe.transform(calculatedAmt) + " MMK");
        return true;
    }
    getMotorRate(motorDetail) {
        let cc = "";
        let currency = "";
        let sumIn = 0;
        let typeOfCoverage = "";
        let typeOfVehicle = "";
        if (motorDetail) {
            currency = motorDetail['currency'] || 0;
        }
        if (motorDetail) {
            sumIn = motorDetail['total_risk_si'] || 0;
        }
        if (motorDetail) {
            typeOfCoverage = motorDetail['coverage_type'] || 0;
        }
        if (motorDetail) {
            typeOfVehicle = motorDetail['vehicle_type'] || 0;
        }
        if (motorDetail) {
            cc = motorDetail['capacity'] || motorDetail['tonnage'] || 0;
        }
        return this.motorService.getOne(currency, sumIn, typeOfCoverage, typeOfVehicle, cc);
    }
    getMotorThirdRate(motorDetail) {
        let cc = "";
        let currency = "";
        let sumIn = 0;
        let typeOfCoverage = "";
        let typeOfVehicle = "";
        if (motorDetail) {
            currency = motorDetail['currency'] || 0;
        }
        if (motorDetail) {
            sumIn = motorDetail['total_risk_si'] || 0;
        }
        if (motorDetail) {
            typeOfCoverage = motorDetail['coverage_type'] || 0;
        }
        if (motorDetail) {
            typeOfVehicle = motorDetail['vehicle_type'] || 0;
        }
        if (motorDetail) {
            cc = motorDetail['capacity'] || motorDetail['tonnage'] || 0;
        }
        return this.motorService.getThrid(currency, typeOfCoverage, typeOfVehicle, cc);
    }
    motorOwnDamage(motorDetail) {
        return this.getMotorRate(motorDetail).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.map)((res) => {
            if (res)
                return res.rate;
            return 0;
        }));
    }
    motorThirdParty(motorDetail) {
        return this.getMotorThirdRate(motorDetail).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.map)((res) => {
            if (res)
                return res.rate;
            return 0;
        }));
    }
    motorSRCC(motorDetail) {
        let currency = "";
        let typeOfVehicle = "";
        let sumIn = 0;
        if (motorDetail) {
            currency = motorDetail['currency'] || 0;
        }
        if (motorDetail) {
            typeOfVehicle = motorDetail['vehicle_type'] || 0;
        }
        if (motorDetail) {
            sumIn = motorDetail['total_risk_si'] || 0;
        }
        // return this.motorOwnDamage().pipe(map(res => {
        if (sumIn > 0) {
            let rate = 0;
            if (currency == 'mmk' && (typeOfVehicle != "T-006" && typeOfVehicle != "T-003")) {
                rate = 0.00065;
            }
            else if (currency == 'mmk' && (typeOfVehicle != "T-006" && typeOfVehicle != "T-003")) {
                rate = 0.00065;
            }
            else if (currency == 'usd' && (typeOfVehicle != "T-006" && typeOfVehicle != "T-003")) {
                rate = 0.00065;
            }
            else if (typeOfVehicle == "T-003") {
                rate = 0.0005;
            }
            return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.of)(sumIn * rate);
        }
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.of)(0);
        // }))
    }
    motorWindScreen(motorDetail) {
        let windscreen_value = 0;
        let currency = "";
        let typeOfCoverage = "";
        let typeOfVehicle = "";
        if (motorDetail) {
            windscreen_value = motorDetail['windscreen_value'] || 0;
        }
        if (motorDetail) {
            currency = motorDetail['currency'] || 0;
        }
        if (motorDetail) {
            typeOfCoverage = motorDetail['coverage_type'] || 0;
        }
        if (motorDetail) {
            typeOfVehicle = motorDetail['vehicle_type'] || 0;
        }
        let rate = 0.15;
        if (currency == 'mmk' && (typeOfVehicle != "T-006" && typeOfVehicle != "T-003")) {
            rate = 0.065;
        }
        else if (typeOfVehicle == "T-003") {
            rate = 0.05;
        }
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.of)(windscreen_value * rate);
    }
    motorMedicalExpense(motorDetail) {
        let currency = "";
        let typeOfVehicle = "";
        if (motorDetail) {
            currency = motorDetail['currency'] || 0;
        }
        if (motorDetail) {
            typeOfVehicle = motorDetail['vehicle_type'] || 0;
        }
        let fixed = 0;
        if (currency == 'usd' && (typeOfVehicle != "T-006" && typeOfVehicle != "T-003")) {
            fixed = 20;
        }
        else if (typeOfVehicle == "T-006") {
            fixed = 20;
        }
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.of)(fixed);
    }
    motorWarRisk(motorDetail) {
        let currency = "";
        let typeOfCoverage = "";
        let typeOfVehicle = "";
        let sumIn = 0;
        if (motorDetail) {
            sumIn = motorDetail['total_risk_si'] || 0;
        }
        if (motorDetail) {
            currency = motorDetail['currency'] || 0;
        }
        if (motorDetail) {
            typeOfCoverage = motorDetail['coverage_type'] || 0;
        }
        if (motorDetail) {
            typeOfVehicle = motorDetail['vehicle_type'] || 0;
        }
        // return this.motorOwnDamage().pipe(map(res => {
        if (sumIn > 0) {
            let rate = 0.00065;
            if (typeOfVehicle == "T-003") {
                rate = 0.0005;
            }
            return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.of)(sumIn * rate);
        }
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.of)(0);
        // }))
    }
    motorActOfGod(motorDetail) {
        let currency = "";
        let typeOfCoverage = "";
        let typeOfVehicle = "";
        let sumIn = 0;
        if (motorDetail) {
            sumIn = motorDetail['total_risk_si'] || 0;
        }
        if (motorDetail) {
            currency = motorDetail['currency'] || 0;
        }
        if (motorDetail) {
            typeOfCoverage = motorDetail['coverage_type'] || 0;
        }
        if (motorDetail) {
            typeOfVehicle = motorDetail['vehicle_type'] || 0;
        }
        // return this.motorOwnDamage().pipe(map(res => {
        if (sumIn > 0) {
            let rate = 0.005;
            if (currency == 'mmk' && (typeOfVehicle != "T-006" && typeOfVehicle != "T-003")) {
                rate = 0.00065;
            }
            else if (currency == 'usd' && (typeOfVehicle != "T-006" && typeOfVehicle != "T-003")) {
                rate = 0.00065;
            }
            else if (typeOfVehicle == "T-003") {
                rate = 0.0005;
            }
            return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.of)(sumIn * rate);
        }
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.of)(0);
        // }))
    }
    motorTheft(motorDetail) {
        let currency = "";
        let typeOfCoverage = "";
        let typeOfVehicle = "";
        if (motorDetail) {
            currency = motorDetail['currency'] || 0;
        }
        if (motorDetail) {
            typeOfCoverage = motorDetail['coverage_type'] || 0;
        }
        if (motorDetail) {
            typeOfVehicle = motorDetail['vehicle_type'] || 0;
        }
        return this.motorOwnDamage(motorDetail).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.map)(res => {
            if (res > 0) {
                let rate = 0;
                if (currency == 'mmk' && (typeOfVehicle != "T-006" && typeOfVehicle != "T-003")) {
                    rate = 0.15;
                }
                else if (currency == 'usd' && (typeOfVehicle != "T-006" && typeOfVehicle != "T-003")) {
                    rate = 0.15;
                }
                else if (typeOfVehicle == "T-003") {
                    rate = 0.15;
                }
                return res * rate;
            }
            return 0;
        }));
    }
    motorEndorsement(motorDetail) {
        let currency = "";
        let typeOfCoverage = "";
        let typeOfVehicle = "";
        if (motorDetail) {
            currency = motorDetail['currency'] || 0;
        }
        if (motorDetail) {
            typeOfCoverage = motorDetail['coverage_type'] || 0;
        }
        if (motorDetail) {
            typeOfVehicle = motorDetail['vehicle_type'] || 0;
        }
        return this.motorOwnDamage(motorDetail).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.map)(res => {
            if (res > 0) {
                let rate = 0.30;
                return res * rate;
            }
            return 0;
        }));
    }
    motorLuggage(motorDetail) {
        let currency = "";
        let typeOfVehicle = "";
        if (motorDetail) {
            currency = motorDetail['currency'] || 0;
        }
        if (motorDetail) {
            typeOfVehicle = motorDetail['vehicle_type'] || 0;
        }
        let fixed = 50;
        if (currency == 'mmk' && (typeOfVehicle != "T-006" && typeOfVehicle != "T-003")) {
            fixed = 80000;
        }
        // else if (typeOfVehicle == "T-006") {
        //   fixed = 50
        // }
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.of)(fixed);
    }
    motorLiability() {
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.of)(25);
    }
    motorPaidDriver(motorDriverDetail) {
        let length = 0;
        if (motorDriverDetail) {
            length = motorDriverDetail.length;
        }
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.of)(30 * length);
    }
    ifMedicalExpense(motorDetail) {
        let currency = "";
        let typeOfCoverage = "";
        let typeOfVehicle = "";
        if (motorDetail) {
            currency = motorDetail['currency'] || 0;
        }
        if (motorDetail) {
            typeOfCoverage = motorDetail['coverage_type'] || 0;
        }
        if (motorDetail) {
            typeOfVehicle = motorDetail['vehicle_type'] || 0;
        }
        if (currency == 'usd') {
            return true;
        }
        // else if (typeOfVehicle == "T-005") {
        //   return false
        // }
        return false;
    }
    ifWarRisk(motorDetail) {
        let currency = "";
        let typeOfCoverage = "";
        let typeOfVehicle = "";
        if (motorDetail) {
            currency = motorDetail['currency'] || 0;
        }
        if (motorDetail) {
            typeOfCoverage = motorDetail['coverage_type'] || 0;
        }
        if (motorDetail) {
            typeOfVehicle = motorDetail['vehicle_type'] || 0;
        }
        if (typeOfVehicle == "T-006") {
            return false;
        }
        return true;
    }
    ifEndorsement(motorDetail) {
        let typeOfVehicle = "";
        if (motorDetail) {
            typeOfVehicle = motorDetail['vehicle_type'] || 0;
        }
        if (typeOfVehicle == "T-006" || typeOfVehicle == "T-003") {
            return false;
        }
        return true;
    }
    ifLuggage(motorDetail) {
        let typeOfVehicle = "";
        if (motorDetail) {
            typeOfVehicle = motorDetail['vehicle_type'] || 0;
        }
        if (typeOfVehicle == "T-003") {
            return false;
        }
        return true;
    }
    ifLiability(motorDetail) {
        let typeOfVehicle = "";
        if (motorDetail) {
            typeOfVehicle = motorDetail['vehicle_type'] || 0;
        }
        if (typeOfVehicle == "T-006") {
            return true;
        }
        return false;
    }
    ifPaidDriver(motorDetail) {
        let typeOfVehicle = "";
        if (motorDetail) {
            typeOfVehicle = motorDetail['vehicle_type'] || 0;
        }
        if (typeOfVehicle == "T-006") {
            return true;
        }
        return false;
    }
    ifCrossBorder(motorDetail) {
        let typeOfVehicle = "";
        if (motorDetail) {
            typeOfVehicle = motorDetail['vehicle_type'] || 0;
        }
        if (typeOfVehicle == "T-006" || typeOfVehicle == "T-003") {
            return false;
        }
        return true;
    }
    smSumInsuredAmt(currentValue, activeForm, option) {
        let type = "";
        const defVal = 1000000;
        if (activeForm.sm_policy_type) {
            type = activeForm.sm_policy_type;
        }
        if (type == "T-002") {
            this.smSumInsuredAmtResult.next(defVal);
        }
        else {
            if (typeof currentValue == 'string') {
                currentValue = parseInt(currentValue.replace("T-", ""));
            }
            currentValue = Number.isNaN(currentValue) ? 1 : currentValue;
            let insuredVale = defVal * currentValue;
            this.smSumInsuredAmtResult.next(insuredVale);
        }
    }
    paCoverage(currentValue, activeForm, option) {
        console.log("call paCoverage");
        let sumIn = 0;
        let currency = "";
        if (activeForm.currency) {
            currency = activeForm.currency;
        }
        else if (this.tempFormData['pa_product_detail']) {
            currency = this.tempFormData['pa_product_detail']['currency'] || 0;
        }
        if (activeForm.sum_insured) {
            sumIn = activeForm.sum_insured;
        }
        else if (this.tempFormData['pa_product_detail']) {
            sumIn = this.tempFormData['pa_product_detail']['sum_insured'] || 0;
        }
        this.paCoverageResult.next(this.numberPipe.transform(sumIn) + currency);
    }
    paPolicyValidation(value, option) {
        let term = value;
        let valid = option.find(x => x.codeId == term);
        if (valid) {
            this.paPolicyValidationResult.next(valid);
        }
    }
    normalCoverage(currentValue, activeForm, options) {
        if (options) {
            let valid = options.find(x => x.codeId == currentValue);
            if (valid) {
                this.normalCoverageResult.next(valid.codeName);
            }
        }
        else {
            this.normalCoverageResult.next(currentValue);
        }
    }
    smPremium(currentValue, activeForm, option, form) {
        let type = "";
        let policy = "";
        let sumInsured = "";
        if (activeForm.sm_policy_type) {
            type = activeForm.sm_policy_type;
        }
        if (activeForm.sm_policy_term) {
            policy = activeForm.sm_policy_term;
        }
        if (activeForm.sm_sum_insured) {
            sumInsured = activeForm.sm_sum_insured;
        }
        let rate = 0;
        if (type == 'T-001') {
            rate = 0.5 / 100;
        }
        else {
            rate = policy == "T-001" ? 0.05 / 100 : 0.1 / 100;
        }
        let calculatedAmt = parseInt(sumInsured) * rate;
        if (calculatedAmt) {
            if (type == 'T-001') {
                calculatedAmt = this.calculateDecimal(calculatedAmt / 12);
            }
            this.paPremiumResult.next(this.numberPipe.transform(calculatedAmt) + " MMK / month");
        }
        return true;
    }
    travelPremium(currentValue, activeForm, option, form) {
        let searchData = [];
        let plan = '';
        let duration = '';
        let unit = '';
        if (activeForm.travel_plan) {
            plan = activeForm.travel_plan;
        }
        if (activeForm.travel_duration) {
            duration = activeForm.travel_duration;
        }
        if (activeForm.insured_unit) {
            unit = activeForm.insured_unit;
        }
        if (plan && duration && unit) {
            searchData = plan == 'T-001' ? _const_data_value__WEBPACK_IMPORTED_MODULE_2__.IN_BOUND : _const_data_value__WEBPACK_IMPORTED_MODULE_2__.OUT_BOUND;
            let premium = searchData.find(x => x.travel_duration == duration && x.travel_unit == unit);
            if (premium) {
                this.paPremiumResult.next(this.numberPipe.transform(premium.rate) + " MMK");
            }
        }
        return true;
        // travel_duration
    }
    calculateDecimal(value) {
        return Math.round(value * 100) / 100;
    }
};
GlobalFunctionService.ctorParameters = () => [
    { type: _angular_common__WEBPACK_IMPORTED_MODULE_9__.DecimalPipe },
    { type: _modules_loading_toast_alert_model_alert_service__WEBPACK_IMPORTED_MODULE_0__.AlertService },
    { type: _pages_currency_exchange_currency_exchange_service__WEBPACK_IMPORTED_MODULE_1__.LatestCurrencyExchangeService },
    { type: _rate_datas_motor_rate_service__WEBPACK_IMPORTED_MODULE_3__.MotorRateService }
];
GlobalFunctionService = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_10__.Injectable)({
        providedIn: 'root',
    })
], GlobalFunctionService);



/***/ }),

/***/ 76545:
/*!*******************************************************!*\
  !*** ./src/app/core/rate-datas/motor-rate.service.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MotorRateService": () => (/* binding */ MotorRateService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ 83981);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../environments/environment */ 18260);
/* harmony import */ var _biz_operation_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../biz.operation.service */ 91691);





const API_HEALTH_URL = `${_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiUrl}/motor/`;
let MotorRateService = class MotorRateService extends _biz_operation_service__WEBPACK_IMPORTED_MODULE_1__.BizOperationService {
    constructor(httpClient) {
        super(httpClient, API_HEALTH_URL);
        this.httpClient = httpClient;
    }
    getOne(currency, si, typeOfCoverage, typeOfVehicle, cc = "") {
        let query = "premium-rate?currency=" + currency + "&si=" + si + "&typeOfCoverage=" + typeOfCoverage + "&typeOfVehicle=" + typeOfVehicle + "&cc=" + cc;
        return this.httpClient.get(API_HEALTH_URL + query);
    }
    getThrid(currency, typeOfCoverage, typeOfVehicle, cc = "") {
        let query = "third-party/premium-rate?currency=" + currency + "&typeOfCoverage=" + typeOfCoverage + "&typeOfVehicle=" + typeOfVehicle + "&cc=" + cc;
        return this.httpClient.get(API_HEALTH_URL + query);
    }
};
MotorRateService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient }
];
MotorRateService = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable)({
        providedIn: 'root'
    })
], MotorRateService);



/***/ }),

/***/ 19113:
/*!**********************************************************************!*\
  !*** ./src/app/pages/currency-exchange/currency-exchange.service.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CurrencyExchangeService": () => (/* binding */ CurrencyExchangeService),
/* harmony export */   "LatestCurrencyExchangeService": () => (/* binding */ LatestCurrencyExchangeService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common/http */ 83981);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../environments/environment */ 18260);
/* harmony import */ var _core_biz_operation_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/biz.operation.service */ 91691);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! moment */ 29243);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_2__);






const API_CURRENCY_URL = `${_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiUrl}/currency`;
const API_CURRENCY_URL2 = `${_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiUrl}/currencyWithType`;
let CurrencyExchangeService = class CurrencyExchangeService extends _core_biz_operation_service__WEBPACK_IMPORTED_MODULE_1__.BizOperationService {
    constructor(httpClient) {
        super(httpClient, API_CURRENCY_URL);
        this.httpClient = httpClient;
    }
    getList(search = {}) {
        let url = API_CURRENCY_URL + "?";
        if (search.date) {
            url = url + "date=" + moment__WEBPACK_IMPORTED_MODULE_2__(search.date).format("YYYY-MM-DD") + "&";
        }
        if (search.currency) {
            url = url + "currency=" + search.currency + "&";
        }
        console.log(url);
        return this.httpClient.get(url);
    }
};
CurrencyExchangeService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_3__.HttpClient }
];
CurrencyExchangeService = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_5__.Injectable)({
        providedIn: 'root'
    })
], CurrencyExchangeService);

let LatestCurrencyExchangeService = class LatestCurrencyExchangeService extends _core_biz_operation_service__WEBPACK_IMPORTED_MODULE_1__.BizOperationService {
    constructor(httpClient) {
        super(httpClient, API_CURRENCY_URL2);
        this.httpClient = httpClient;
    }
    getByType(type) {
        return this.httpClient.get(API_CURRENCY_URL2 + "/" + type);
    }
};
LatestCurrencyExchangeService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_3__.HttpClient }
];
LatestCurrencyExchangeService = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_5__.Injectable)({
        providedIn: 'root'
    })
], LatestCurrencyExchangeService);



/***/ }),

/***/ 43329:
/*!***************************************************************!*\
  !*** ./src/app/pages/products/services/add-on-quo.service.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AddOnQuoService": () => (/* binding */ AddOnQuoService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ 83981);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../environments/environment */ 18260);
/* harmony import */ var _core_biz_operation_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/biz.operation.service */ 91691);





const API_ADDON_URL = `${_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiUrl}/quotationAddon`;
let AddOnQuoService = class AddOnQuoService extends _core_biz_operation_service__WEBPACK_IMPORTED_MODULE_1__.BizOperationService {
    constructor(httpClient) {
        super(httpClient, API_ADDON_URL);
        this.httpClient = httpClient;
    }
    getOne(id, quo) {
        return this.httpClient.get(API_ADDON_URL + "/" + id + "/" + quo);
    }
    deleteAll(quo) {
        return this.httpClient.delete(API_ADDON_URL + "/quotation/" + quo);
    }
    getAllById(postData) {
        return this.httpClient.post(API_ADDON_URL + "s", postData);
    }
};
AddOnQuoService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient }
];
AddOnQuoService = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable)({
        providedIn: 'root'
    })
], AddOnQuoService);



/***/ }),

/***/ 45570:
/*!*****************************************************************!*\
  !*** ./src/app/pages/products/services/coverage-quo.service.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CoverageQuoService": () => (/* binding */ CoverageQuoService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ 83981);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../environments/environment */ 18260);
/* harmony import */ var _core_biz_operation_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/biz.operation.service */ 91691);





const API_COVERAGE_URL = `${_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiUrl}/quotationCoverage`;
let CoverageQuoService = class CoverageQuoService extends _core_biz_operation_service__WEBPACK_IMPORTED_MODULE_1__.BizOperationService {
    constructor(httpClient) {
        super(httpClient, API_COVERAGE_URL);
        this.httpClient = httpClient;
    }
    getOne(id, quo) {
        return this.httpClient.get(API_COVERAGE_URL + "/" + id + "/" + quo);
    }
    deleteAll(quo) {
        return this.httpClient.delete(API_COVERAGE_URL + "/quotation/" + quo);
    }
    getAllById(postData) {
        return this.httpClient.post(API_COVERAGE_URL + "s", postData);
    }
};
CoverageQuoService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient }
];
CoverageQuoService = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable)({
        providedIn: 'root'
    })
], CoverageQuoService);



/***/ }),

/***/ 66977:
/*!***********************************************************************************!*\
  !*** ./src/app/pages/static-pages/fire-risk/models&services/fire-risk.service.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FireRiskService": () => (/* binding */ FireRiskService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ 83981);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../environments/environment */ 18260);
/* harmony import */ var _core_biz_operation_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../core/biz.operation.service */ 91691);





const API_FIRE_RISK_URL = `${_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiUrl}/fire-policy/risk`;
let FireRiskService = class FireRiskService extends _core_biz_operation_service__WEBPACK_IMPORTED_MODULE_1__.BizOperationService {
    constructor(httpClient) {
        super(httpClient, API_FIRE_RISK_URL);
        this.httpClient = httpClient;
    }
    deleteMany(redId) {
        // /api/v1/health/payment-schedule/resource/{resourceId}
        return this.httpClient.delete(API_FIRE_RISK_URL + "/resource/" + redId);
    }
    getMany(redId) {
        // /api/v1/health/payment-schedule/resource/{resourceId}
        return this.httpClient.get(API_FIRE_RISK_URL + "/resource/" + redId);
    }
    getStock(riskId) {
        return this.httpClient.get(API_FIRE_RISK_URL + "/" + riskId + "/stock");
    }
    getPlant(riskId) {
        return this.httpClient.get(API_FIRE_RISK_URL + "/" + riskId + "/plant-machinery");
    }
    getContent(riskId) {
        return this.httpClient.get(API_FIRE_RISK_URL + "/" + riskId + "/content");
    }
};
FireRiskService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient }
];
FireRiskService = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable)({
        providedIn: 'root'
    })
], FireRiskService);



/***/ }),

/***/ 75103:
/*!*********************************************************************************************!*\
  !*** ./src/app/pages/static-pages/fire-simple-page/models&services/fire-product.service.ts ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FireProductService": () => (/* binding */ FireProductService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ 83981);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../environments/environment */ 18260);
/* harmony import */ var _core_biz_operation_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../core/biz.operation.service */ 91691);





const API_FIRE_URL = `${_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiUrl}/fire-policy`;
let FireProductService = class FireProductService extends _core_biz_operation_service__WEBPACK_IMPORTED_MODULE_1__.BizOperationService {
    constructor(httpClient) {
        super(httpClient, API_FIRE_URL);
        this.httpClient = httpClient;
    }
    getOne(quo) {
        console.log(quo, "data");
        return this.httpClient.get(API_FIRE_URL + "/resource?resourceId=" + quo);
    }
};
FireProductService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient }
];
FireProductService = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable)({
        providedIn: 'root'
    })
], FireProductService);



/***/ })

}]);
//# sourceMappingURL=default-node_modules_ngx-currency___ivy_ngcc___fesm2015_ngx-currency_js-src_app_core_global-f-461f33.js.map