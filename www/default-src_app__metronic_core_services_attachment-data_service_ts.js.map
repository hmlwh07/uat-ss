{"version":3,"file":"default-src_app__metronic_core_services_attachment-data_service_ts.js","mappings":";;;;;;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;AACxB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4BAA4B;AAC7B;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;;;;;;;;;;;;;;;;;;;;;ACpG0C;AACjD,mBAAmB,+DAAc;AACjC,eAAe,kKAAe;AAC9B,CAAC;AAC6B;AACR;;;;;;;;;;;;;;;;;ACLtB;AAC0D;AACT;;AAEjD,mBAAmB,+DAAc;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB,wEAAqB;AACxC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;;;AAGA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA,WAAW,uEAAoB;AAC/B;AACA;AACA;AACA;AACA,KAAK,kBAAkB,IAAI;;AAE3B;AACA;;AAEA;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,QAAQ,+DAAkB,cAAc,+DAAkB;AAC1D;AACA;AACA;AACA;AACA,QAAQ,oEAAiB,EAAE,gBAAgB;AAC3C;AACA,eAAe,sBAAsB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0BAA0B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,iEAAe,yBAAyB,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvHS;AACP;AAEwB;AACO;AACc;AACA;AACC;AAChC;AACb;AAC4B;AACzB;AAE/C,MAAM,cAAc,GAAG,GAAG,yEAAkB,sBAAsB,CAAC;IAItD,uBAAuB,SAAvB,uBAAwB,SAAQ,4EAAgC;IAC3E,YAAsB,UAAsB;QAC1C,KAAK,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;QADd,eAAU,GAAV,UAAU,CAAY;IAE5C,CAAC;CACF;;YArBQ,4DAAU;;AAiBN,uBAAuB;IAHnC,0DAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,uBAAuB,CAInC;AAJmC;AAMpC,MAAM,gBAAgB,GAAG,GAAG,yEAAkB,wBAAwB,CAAC;IAI1D,yBAAyB,SAAzB,yBAA0B,SAAQ,4EAAgC;IAC7E,YAAsB,UAAsB,EAAU,IAAU,EACtD,cAA8B,EAAU,YAA6B,EACrE,YAA0B;QAClC,KAAK,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;QAHhB,eAAU,GAAV,UAAU,CAAY;QAAU,SAAI,GAAJ,IAAI,CAAM;QACtD,mBAAc,GAAd,cAAc,CAAgB;QAAU,iBAAY,GAAZ,YAAY,CAAiB;QACrE,iBAAY,GAAZ,YAAY,CAAc;IAEpC,CAAC;IAED,WAAW,CAAC,EAAE,EAAE,QAAgB;QAC9B,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,gBAAgB,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAClG,IAAI,GAAG,EAAE;gBACP,IAAI,uEAA0B,EAAE,EAAE;oBAChC,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,GAAG,CAAC;iBACnC;qBAAM;oBACL,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,QAAQ,CAAC;iBACjC;aACF;YACD,mCAAmC;QACrC,CAAC,CAAC;IACJ,CAAC;IAED,YAAY,CAAC,IAAI,EAAE,QAAQ;QACzB,IAAI,CAAC,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QACpC,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QACnC,CAAC,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACtB,CAAC,CAAC,KAAK,EAAE,CAAC;QACV,CAAC,CAAC,MAAM,EAAE;IACZ,CAAC;IAEK,cAAc,CAAC,QAAgB,EAAE,GAAQ;;YAC7C,IAAI;gBACF,IAAI,GAAG,GAAG,MAAM,mEAAgB,CAAC;oBAC/B,IAAI,EAAE,mBAAmB;oBACzB,SAAS,EAAE,sEAAmB;oBAC9B,SAAS,EAAE,KAAK;iBACjB,CAAC,CAAC;gBACH,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;gBAC5B,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,GAAG,CAAC;aAC/B;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,GAAG,CAAC;gBAC9B,+CAA+C;aAChD;QACH,CAAC;KAAA;IAEK,UAAU,CAAC,QAAQ,EAAE,QAAQ;;YACjC,IAAI;gBACF,MAAM,iEAAU,CAAC;oBACf,IAAI,EAAE,oBAAoB,GAAG,QAAQ;oBACrC,SAAS,EAAE,sEAAmB;oBAC9B,IAAI,EAAE,QAAQ;iBACf,CAAC;gBACF,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE;gBACtC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,gBAAgB,EAAE,iBAAiB,CAAC,CAAC;aACjE;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE;gBACtC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,gBAAgB,EAAE,eAAe,CAAC,CAAC;aAC/D;QAEH,CAAC;KAAA;CACF;;YArFQ,4DAAU;YAQV,mEAAI;YAFJ,0FAAc;YACd,2FAAe;YAFf,0FAAY;;AAsBR,yBAAyB;IAHrC,0DAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,yBAAyB,CA0DrC;AA1DqC;AA4DtC,MAAM,cAAc,GAAG,GAAG,yEAAkB,iBAAiB,CAAC;IAIjD,oBAAoB,SAApB,oBAAqB,SAAQ,4EAAgC;IACxE,YAAsB,UAAsB;QAC1C,KAAK,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;QADd,eAAU,GAAV,UAAU,CAAY;IAE5C,CAAC;IACD,oBAAoB,CAAC,QAAQ,EAAE,UAAU;QACvC,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,cAAc,GAAG,YAAY,GAAG,QAAQ,GAAG,cAAc,GAAG,UAAU,CAAC;IACpG,CAAC;CACF;;YAlGQ,4DAAU;;AA2FN,oBAAoB;IAHhC,0DAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,oBAAoB,CAOhC;AAPgC","sources":["./node_modules/@capacitor/filesystem/dist/esm/definitions.js","./node_modules/@capacitor/filesystem/dist/esm/index.js","./node_modules/capacitor-blob-writer/blob_writer.js","./src/app/_metronic/core/services/attachment-data.service.ts"],"sourcesContent":["export var Directory;\n(function (Directory) {\n    /**\n     * The Documents directory\n     * On iOS it's the app's documents directory.\n     * Use this directory to store user-generated content.\n     * On Android it's the Public Documents folder, so it's accessible from other apps.\n     * It's not accesible on Android 10 unless the app enables legacy External Storage\n     * by adding `android:requestLegacyExternalStorage=\"true\"` in the `application` tag\n     * in the `AndroidManifest.xml`.\n     * It's not accesible on Android 11 or newer.\n     *\n     * @since 1.0.0\n     */\n    Directory[\"Documents\"] = \"DOCUMENTS\";\n    /**\n     * The Data directory\n     * On iOS it will use the Documents directory.\n     * On Android it's the directory holding application files.\n     * Files will be deleted when the application is uninstalled.\n     *\n     * @since 1.0.0\n     */\n    Directory[\"Data\"] = \"DATA\";\n    /**\n     * The Library directory\n     * On iOS it will use the Library directory.\n     * On Android it's the directory holding application files.\n     * Files will be deleted when the application is uninstalled.\n     *\n     * @since 1.1.0\n     */\n    Directory[\"Library\"] = \"LIBRARY\";\n    /**\n     * The Cache directory\n     * Can be deleted in cases of low memory, so use this directory to write app-specific files\n     * that your app can re-create easily.\n     *\n     * @since 1.0.0\n     */\n    Directory[\"Cache\"] = \"CACHE\";\n    /**\n     * The external directory\n     * On iOS it will use the Documents directory\n     * On Android it's the directory on the primary shared/external\n     * storage device where the application can place persistent files it owns.\n     * These files are internal to the applications, and not typically visible\n     * to the user as media.\n     * Files will be deleted when the application is uninstalled.\n     *\n     * @since 1.0.0\n     */\n    Directory[\"External\"] = \"EXTERNAL\";\n    /**\n     * The external storage directory\n     * On iOS it will use the Documents directory\n     * On Android it's the primary shared/external storage directory.\n     * It's not accesible on Android 10 unless the app enables legacy External Storage\n     * by adding `android:requestLegacyExternalStorage=\"true\"` in the `application` tag\n     * in the `AndroidManifest.xml`.\n     * It's not accesible on Android 11 or newer.\n     *\n     * @since 1.0.0\n     */\n    Directory[\"ExternalStorage\"] = \"EXTERNAL_STORAGE\";\n})(Directory || (Directory = {}));\nexport var Encoding;\n(function (Encoding) {\n    /**\n     * Eight-bit UCS Transformation Format\n     *\n     * @since 1.0.0\n     */\n    Encoding[\"UTF8\"] = \"utf8\";\n    /**\n     * Seven-bit ASCII, a.k.a. ISO646-US, a.k.a. the Basic Latin block of the\n     * Unicode character set\n     * This encoding is only supported on Android.\n     *\n     * @since 1.0.0\n     */\n    Encoding[\"ASCII\"] = \"ascii\";\n    /**\n     * Sixteen-bit UCS Transformation Format, byte order identified by an\n     * optional byte-order mark\n     * This encoding is only supported on Android.\n     *\n     * @since 1.0.0\n     */\n    Encoding[\"UTF16\"] = \"utf16\";\n})(Encoding || (Encoding = {}));\n/**\n * @deprecated Use `Directory`.\n * @since 1.0.0\n */\nexport const FilesystemDirectory = Directory;\n/**\n * @deprecated Use `Encoding`.\n * @since 1.0.0\n */\nexport const FilesystemEncoding = Encoding;\n","import { registerPlugin } from '@capacitor/core';\nconst Filesystem = registerPlugin('Filesystem', {\n    web: () => import('./web').then(m => new m.FilesystemWeb()),\n});\nexport * from './definitions';\nexport { Filesystem };\n","/*jslint browser */\nimport {Capacitor, registerPlugin} from \"@capacitor/core\";\nimport {Filesystem} from \"@capacitor/filesystem\";\n\nconst BlobWriter = registerPlugin(\"BlobWriter\");\n\nfunction array_buffer_to_base64(buffer) {\n    const bytes = new Uint8Array(buffer);\n    let binary_string = \"\";\n    let byte_nr = 0;\n    while (true) {\n        if (byte_nr >= bytes.byteLength) {\n            break;\n        }\n        binary_string += String.fromCharCode(bytes[byte_nr]);\n        byte_nr += 1;\n    }\n    return window.btoa(binary_string);\n}\n\nfunction append_blob(directory, path, blob) {\n    if (blob.size === 0) {\n        return Promise.resolve();\n    }\n\n// By choosing a chunk size which is a multiple of 3, we avoid a bug in\n// Filesystem.appendFile, only on the web platform, which corrupts files by\n// inserting Base64 padding characters within the file. See\n// https://github.com/ionic-team/capacitor-plugins/issues/649.\n\n    const chunk_size = 3 * 128 * 1024;\n    const chunk_blob = blob.slice(0, chunk_size);\n\n// Read the Blob as an ArrayBuffer, then append it to the file on disk.\n\n    return new window.Response(chunk_blob).arrayBuffer().then(\n        function append_chunk_to_file(buffer) {\n            return Filesystem.appendFile({\n                directory,\n                path,\n                data: array_buffer_to_base64(buffer)\n            });\n        }\n    ).then(function write_remaining() {\n        return append_blob(directory, path, blob.slice(chunk_size));\n    });\n}\n\n\nfunction write_file_via_bridge({\n    path,\n    directory,\n    blob,\n    recursive\n}) {\n\n// Firstly, create & truncate the file.\n\n    return Filesystem.writeFile({\n        directory,\n        path,\n        recursive,\n        data: \"\"\n    }).then(function ({uri}) {\n\n// Now write the file incrementally so we do not exceed our memory limits when\n// attempting to Base64 encode the entire Blob at once.\n\n        return append_blob(directory, path, blob).then(function () {\n            return uri;\n        });\n    });\n}\n\nfunction write_blob(options) {\n    const {\n        path,\n        directory,\n        blob,\n        recursive,\n        on_fallback\n    } = options;\n    if (Capacitor.platform !== \"ios\" && Capacitor.platform !== \"android\") {\n        return write_file_via_bridge(options);\n    }\n    return Promise.all([\n        BlobWriter.get_config(),\n        Filesystem.getUri({path, directory})\n    ]).then(function on_success([config, file_info]) {\n        const {base_url, auth_token} = config;\n        const absolute_path = file_info.uri.replace(\"file://\", \"\");\n        return Promise.all([\n            fetch(\n                base_url + absolute_path + (\n                    recursive\n                    ? \"?recursive=true\"\n                    : \"\"\n                ),\n                {\n                    headers: {authorization: auth_token},\n                    method: \"put\",\n                    body: blob\n                }\n            ),\n            Promise.resolve(file_info)\n        ]);\n    }).then(function ([response, file_info]) {\n        if (response.status !== 204) {\n            throw new Error(\"Bad HTTP status: \" + response.status);\n        }\n        return file_info.uri;\n    }).catch(function on_fail(error) {\n        if (on_fallback !== undefined) {\n            on_fallback(error);\n        }\n        return write_file_via_bridge(options);\n    });\n}\n\nexport default Object.freeze(write_blob);\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Lead } from \"src/app/pages/lead-detail/lead.dto\";\r\nimport { environment } from \"../../../../environments/environment\";\r\nimport { BizOperationService } from \"../../../core/biz.operation.service\";\r\nimport { AlertService } from \"../../../modules/loading-toast/alert-model/alert.service\";\r\nimport { LoadingService } from \"../../../modules/loading-toast/loading/loading.service\";\r\nimport { KBZToastService } from \"../../../modules/loading-toast/toast/kbz-toast.service\";\r\nimport { File } from '@awesome-cordova-plugins/file/ngx';\r\nimport { Capacitor } from \"@capacitor/core\";\r\nimport { Filesystem, Directory, Encoding } from '@capacitor/filesystem';\r\nimport write_blob from \"capacitor-blob-writer\";\r\n\r\nconst API_UPLOAD_URL = `${environment.apiUrl}/attachment-uploader`;\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AttachmentUploadService extends BizOperationService<any, number>{\r\n  constructor(protected httpClient: HttpClient) {\r\n    super(httpClient, API_UPLOAD_URL);\r\n  }\r\n}\r\n\r\nconst API_DOWNLOAD_URL = `${environment.apiUrl}/attachment-downloader`;\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AttachmentDownloadService extends BizOperationService<any, number>{\r\n  constructor(protected httpClient: HttpClient, private file: File, \r\n    private loadingService: LoadingService, private toastService: KBZToastService, \r\n    private alertService: AlertService) {\r\n    super(httpClient, API_DOWNLOAD_URL);\r\n  }\r\n\r\n  getDownload(id, fileName: string) {\r\n    this.httpClient.get(API_DOWNLOAD_URL + \"/\" + id, { responseType: 'blob' }).toPromise().then((res) => {\r\n      if (res) {\r\n        if (Capacitor.isNativePlatform()) {\r\n          this.mobileDownload(fileName, res)\r\n        } else {\r\n          this.downloadFile(res, fileName)\r\n        }\r\n      }\r\n      // this.downloadFile(res, fileName)\r\n    })\r\n  }\r\n\r\n  downloadFile(data, fileName) {\r\n    var a = document.createElement(\"a\");\r\n    a.href = URL.createObjectURL(data);\r\n    a.download = fileName;\r\n    a.click();\r\n    a.remove()\r\n  }\r\n\r\n  async mobileDownload(fileName: string, res: any) {\r\n    try {\r\n      let ret = await Filesystem.mkdir({\r\n        path: 'kbzsale_downloads',\r\n        directory: Directory.Documents,\r\n        recursive: false,\r\n      });\r\n      console.log(\"folder \", ret);\r\n      this.createFile(fileName, res)\r\n    } catch (e) {\r\n      this.createFile(fileName, res)\r\n      //console.error(\"Unable to make directory\", e);\r\n    }\r\n  }\r\n\r\n  async createFile(fileName, blobFile) {\r\n    try {\r\n      await write_blob({\r\n        path: \"kbzsale_downloads/\" + fileName,\r\n        directory: Directory.Documents,\r\n        blob: blobFile\r\n      })\r\n      await this.loadingService.deactivate()\r\n      this.alertService.activate('\"Download File', 'Success Message');\r\n    } catch (error) {\r\n      await this.loadingService.deactivate()\r\n      this.alertService.activate('\"Download Fail', 'Error Message');\r\n    }\r\n\r\n  }\r\n}\r\n\r\nconst ATTAcHMENT_REF = `${environment.apiUrl}/attachment-ref`;\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AttachmentServiceRef extends BizOperationService<any, number>{\r\n  constructor(protected httpClient: HttpClient) {\r\n    super(httpClient, ATTAcHMENT_REF);\r\n  }\r\n  getAttachmentListRef(refDocNo, refDocType) {\r\n    return this.httpClient.get(ATTAcHMENT_REF + \"?refDocNo=\" + refDocNo + \"&refDocType=\" + refDocType)\r\n  }\r\n}"],"names":[],"sourceRoot":"webpack:///"}