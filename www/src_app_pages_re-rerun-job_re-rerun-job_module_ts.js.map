{"version":3,"file":"src_app_pages_re-rerun-job_re-rerun-job_module_ts.js","mappings":"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","sources":["./src/app/pages/re-rerun-job/error-details/error-details.component.ts","./src/app/pages/re-rerun-job/list.const.ts","./src/app/pages/re-rerun-job/re-rerun-job-routing.module.ts","./src/app/pages/re-rerun-job/re-rerun-job.module.ts","./src/app/pages/re-rerun-job/re-rerun-job.page.ts","./src/app/pages/re-rerun-job/re-run.service.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n  selector: 'app-error-details',\r\n  templateUrl: './error-details.component.html',\r\n  styleUrls: ['./error-details.component.scss'],\r\n})\r\nexport class ErrorDetailsComponent implements OnInit {\r\n  @Input() data;\r\n  constructor(private ngModal: NgbActiveModal) { }\r\n\r\n  ngOnInit() { \r\n    // console.log(this.data);\r\n    this.data.errorDescription = (this.data.logMsg + \"\").split(',')\r\n    \r\n  }\r\n\r\n  closeModal() {\r\n    this.ngModal.dismiss()\r\n  }\r\n\r\n  reRun(){\r\n    this.ngModal.dismiss({ type: 'rerun' })\r\n    \r\n  }\r\n\r\n}\r\n","import { COLTYPE, TableCol } from '../../_metronic/shared/crud-table/components/material-table-view/table-dto'\r\nexport const CRM_COL: TableCol[] = [\r\n  {\r\n    title: \"Job Type\",\r\n    type: COLTYPE.FEILD,\r\n    field: \"jobType\"\r\n  },\r\n  {\r\n    title: \"Job Name\",\r\n    type: COLTYPE.FEILD,\r\n    field: \"jobNameValue\"\r\n  },\r\n  {\r\n    title: \"Date\",\r\n    type: COLTYPE.FEILD,\r\n    field: \"jobDateTime\",\r\n    // isDateTime: true\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    type: COLTYPE.FEILD,\r\n    field: \"statusValue\",\r\n    isTitle: true\r\n  },\r\n  {\r\n    title: \"Actions\",\r\n    type: COLTYPE.ACTION,\r\n    field: \"actions\",\r\n    btn: {\r\n      view: true,\r\n      rerun: true,\r\n    }\r\n  },\r\n]\r\n\r\nexport const CRM_DISPLAYCOL: string[] = [\r\n  \"jobType\",\r\n  \"jobNameValue\",\r\n  \"jobDateTime\",\r\n  'statusValue',\r\n  \"actions\",\r\n]\r\n\r\n\r\nexport const SALE_COL: TableCol[] = [\r\n  {\r\n    title: \"Job Type\",\r\n    type: COLTYPE.FEILD,\r\n    field: \"jobType\"\r\n  },\r\n  {\r\n    title: \"Job Name\",\r\n    type: COLTYPE.FEILD,\r\n    field: \"jobName\"\r\n  },\r\n  {\r\n    title: \"Date\",\r\n    type: COLTYPE.FEILD,\r\n    field: \"runDate\",\r\n    isFromatDate: true\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    type: COLTYPE.FEILD,\r\n    field: \"status\",\r\n    isTitle: true\r\n  },\r\n  {\r\n    title: \"Actions\",\r\n    type: COLTYPE.ACTION,\r\n    field: \"actions\",\r\n    btn: {\r\n      view: true,\r\n      rerun: true,\r\n    }\r\n  },\r\n]\r\n\r\nexport const SALE_DISPLAY_COL: string[] = [\r\n  \"jobType\",\r\n  \"jobName\",\r\n  \"runDate\",\r\n  'status',\r\n  \"actions\",\r\n]\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { ReRerunJobPage } from './re-rerun-job.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ReRerunJobPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ReRerunJobPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { ReRerunJobPageRoutingModule } from './re-rerun-job-routing.module';\r\n\r\nimport { ReRerunJobPage } from './re-rerun-job.page';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\nimport { CRUDTableModule } from 'src/app/_metronic/shared/crud-table';\r\nimport { LanguageModule } from 'src/app/modules/languages/languages.modules';\r\nimport { ErrorDetailsComponent } from './error-details/error-details.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    ReactiveFormsModule,\r\n    NgSelectModule,\r\n    CRUDTableModule,\r\n    LanguageModule,\r\n    ReRerunJobPageRoutingModule\r\n  ],\r\n  declarations: [ReRerunJobPage,ErrorDetailsComponent],\r\n  providers:[]\r\n})\r\nexport class ReRerunJobPageModule { }\r\n","import { ChangeDetectorRef, Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { MaterialTableViewComponent } from 'src/app/_metronic/shared/crud-table/components/material-table-view/material-table-view.component';\r\nimport { AlertService } from '../../modules/loading-toast/alert-model/alert.service';\r\nimport { ErrorDetailsComponent } from './error-details/error-details.component';\r\nimport { CRM_COL, CRM_DISPLAYCOL, SALE_COL, SALE_DISPLAY_COL } from './list.const';\r\nimport { ReRunService } from './re-run.service';\r\nimport { map } from \"rxjs\"\r\n@Component({\r\n  selector: 'app-re-rerun-job',\r\n  templateUrl: './re-rerun-job.page.html',\r\n  styleUrls: ['./re-rerun-job.page.scss'],\r\n})\r\nexport class ReRerunJobPage implements OnInit {\r\n  reRunForm: FormGroup\r\n  typeOption: any = [\r\n    { code: '', value: 'All' },\r\n    { code: 'CRM', value: 'Management Portal' },\r\n    { code: 'SALE', value: 'Sale Portal' },\r\n  ]\r\n  nameOption: any = [\r\n    { code: '', value: 'All' },\r\n    { code: 'Create Update Party', value: 'Create / Update Party' },\r\n    { code: 'Renewal Policy', value: 'Renewal Policy' },\r\n    { code: 'Update Policy Status', value: 'Update Policy Status' }\r\n  ]\r\n  statusOption: any = [\r\n    { code: '', value: 'All' },\r\n    { code: 'FAIL', value: 'Failed' },\r\n    { code: 'SUCCESS', value: 'Success' },\r\n  ]\r\n  listFromCRM: any = [\r\n  ]\r\n  listFromSale: any = [\r\n  ]\r\n  isCRM: boolean = false\r\n  @ViewChild(MaterialTableViewComponent) matTableCRM: MaterialTableViewComponent;\r\n  @ViewChild(MaterialTableViewComponent) matTableSale: MaterialTableViewComponent;\r\n\r\n  ELEMENT_COL = JSON.parse(JSON.stringify(CRM_COL));\r\n  displayedColumns = JSON.parse(JSON.stringify(CRM_DISPLAYCOL));\r\n  ELEMENT_COL_SALE = JSON.parse(JSON.stringify(SALE_COL));\r\n  displayedColumnsSale = JSON.parse(JSON.stringify(SALE_DISPLAY_COL));\r\n  constructor(private reRunService: ReRunService, private modalService: NgbModal, private cdf: ChangeDetectorRef, private alertService: AlertService) { }\r\n\r\n  ngOnInit() {\r\n    this.loadForm()\r\n    // this.getList()\r\n  }\r\n  ngAfterViewInit() {\r\n    this.getList()\r\n  }\r\n\r\n  loadForm() {\r\n    this.reRunForm = new FormGroup({\r\n      startDate: new FormControl(null),\r\n      endDate: new FormControl(null),\r\n      typeCode: new FormControl(''),\r\n      name: new FormControl(''),\r\n      status: new FormControl('')\r\n    });\r\n  }\r\n\r\n  getList() {\r\n  \r\n    this.reRunService.getReRunListByType(this.reRunForm.value).pipe(map((x:any)=>{\r\n      return x.map((data)=>{\r\n        data.statusValue = data.status == \"FAIL\" ? \"FAILED\" : data.status\r\n        data.jobNameValue=data.jobName== \"RunTCSAPIByScheduler\" ? \"Create / Update Party\":data.jobName\r\n        if(data.date && data.time){\r\n          data.jobDateTime=data.date +\"-\"+ data.time\r\n        }\r\n        else{\r\n          data.jobDateTime=data.runDate\r\n        }\r\n        return data\r\n      })\r\n    })).toPromise().then((res) => {\r\n      if (res) {\r\n        console.log(\"res\", res);\r\n        this.listFromCRM = res\r\n        this.cdf.detectChanges()\r\n        this.matTableCRM.reChangeData()\r\n        if (this.reRunForm.controls.typeCode.value == 'CRM') {\r\n          this.isCRM = true\r\n        }\r\n        else {\r\n          this.isCRM = false\r\n        }\r\n      }\r\n    })\r\n\r\n  }\r\n\r\n  actionBtn(event) {\r\n    console.log(event);\r\n\r\n    if (event.cmd == \"view\") {\r\n      this.viewErrorDetail(event.data)\r\n    }\r\n    if (event.cmd == \"rerun\") {\r\n      if (event.data.status != \"FAIL\") {\r\n        this.alertService.activate('This job was already successful!', 'Warning Message');\r\n        return false\r\n      }\r\n      this.alertService.activate('Are you sure want to re-run?', 'Warning Message').then(async result => {\r\n        if (result) {\r\n          if (event.data.jobType == \"CRM\")\r\n            this.reRunCRM(event.data)\r\n          else {\r\n            if (event.data.jobName == \"Renewal Policy\") {\r\n              this.reRunRenewal()\r\n            } else\r\n              this.reRunPolicyStatus(event.data)\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  reRunRenewal() {\r\n    this.reRunService.reRunRenewal().toPromise().then((res: any) => {\r\n      console.log(res);\r\n      if (res) {\r\n        this.alertService.activate('This job was re-run successful', 'Success Message');\r\n        this.getList()\r\n\r\n      }\r\n    })\r\n  }\r\n  reRunPolicyStatus(data) {\r\n    this.reRunService.reRunPolicyStatus(data.runDate).toPromise().then((res: any) => {\r\n      if (res) {\r\n        this.alertService.activate('This job was re-run successful', 'Success Message');\r\n        this.getList()\r\n\r\n      }\r\n    })\r\n  }\r\n  reRunCRM(data) {\r\n    this.reRunService.reRunCRM(data.runDate).toPromise().then((res: any) => {\r\n      if (res) {\r\n        this.alertService.activate('This job was re-run successful', 'Success Message');\r\n        this.getList()\r\n      }\r\n    })\r\n  }\r\n  viewErrorDetail(data) {\r\n    let modalRef;\r\n    modalRef = this.modalService.open(ErrorDetailsComponent, { size: 'lg', backdrop: true, centered: true, scrollable: true });\r\n    modalRef.componentInstance.data = data\r\n    modalRef.result.then(() => { }, (res) => {\r\n      if (res) {\r\n        if (data.status != \"FAIL\") {\r\n          this.alertService.activate('This job was already successful!', 'Warning Message');\r\n          return false\r\n        }\r\n        this.alertService.activate('Are you sure want to re-run?', 'Warning Message').then(async result => {\r\n          if (result) {\r\n            if (data.jobType == \"CRM\")\r\n              this.reRunCRM(data)\r\n            else {\r\n              if (data.jobName == \"Renewal Policy\") {\r\n                this.reRunRenewal()\r\n              } else\r\n                this.reRunPolicyStatus(data)\r\n            }\r\n          }\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  //for view\r\n  isControlValid(controlName: string): boolean {\r\n    const control = this.reRunForm.controls[controlName];\r\n    return control.valid && (control.dirty || control.touched);\r\n  }\r\n\r\n  isControlInvalid(controlName: string): boolean {\r\n    const control = this.reRunForm.controls[controlName];\r\n    return control.invalid && (control.dirty || control.touched);\r\n  }\r\n\r\n  controlHasError(validation, controlName): boolean {\r\n    const control = this.reRunForm.controls[controlName];\r\n    return control.hasError(validation) && (control.dirty || control.touched);\r\n  }\r\n\r\n  isControlTouched(controlName): boolean {\r\n    const control = this.reRunForm.controls[controlName];\r\n    return control.dirty || control.touched;\r\n  }\r\n  cancel() {\r\n    this.reRunForm.reset();\r\n    this.getList();\r\n  }\r\n\r\n\r\n}\r\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport * as moment from \"moment\";\r\nimport { environment } from \"../../../environments/environment\";\r\n\r\nconst API_RE_RUN_URL = `${environment.apiUrl}/scheduler-log/search`;\r\nconst API_RE_RUN_URL_TYPE = `${environment.apiUrl}/scheduler-log/type/`;\r\nconst API_RE_RUN_POLICY_STATUS_URL = `${environment.apiUrl}/scheduler/status/run`;\r\nconst API_RE_RUN_RENEWAL_URL = `${environment.apiUrl}/scheduler/renewal/run`;\r\nconst API_RE_RUN_CRM_URL = `${environment.apiUrl}/scheduler/crm/customer/run`\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ReRunService {\r\n  constructor(protected httpClient: HttpClient) {\r\n  }\r\n\r\n  getReRunListByType(search: any = {}) {\r\n    let url = API_RE_RUN_URL\r\n    let postData = {\r\n      \"endDate\": \"\",\r\n      \"startDate\": \"\",\r\n      \"jobName\": \"\",\r\n      \"jobType\": \"\",\r\n      \"status\": \"\"\r\n    }\r\n    if (search.startDate) {\r\n      postData.startDate = moment(search.startDate).format(\"YYYY-MM-DD\")\r\n    }\r\n    if (search.endDate) {\r\n      postData.endDate = moment(search.endDate).format(\"YYYY-MM-DD\")\r\n    }\r\n    if (search.name) {\r\n      postData.jobName = search.name\r\n    }\r\n    if (search.typeCode) {\r\n      postData.jobType = search.typeCode\r\n    }\r\n    if (search.status) {\r\n      postData.status = search.status\r\n    }\r\n\r\n    return this.httpClient.post(url, postData)\r\n  }\r\n\r\n  reRunRenewal() {\r\n    return this.httpClient.post(API_RE_RUN_RENEWAL_URL, {})\r\n  }\r\n\r\n  reRunPolicyStatus(date: string) {\r\n    let formatDate = moment(date).format(\"YYYY-MM-DD\")\r\n    let url = API_RE_RUN_POLICY_STATUS_URL + \"?date=\" + formatDate\r\n    return this.httpClient.post(url, {})\r\n  }\r\n\r\n  reRunCRM(date: string) {\r\n    let formatDate = moment(date).format(\"YYYY-MM-DD\")\r\n    let url = API_RE_RUN_CRM_URL + \"?date=\" + formatDate\r\n    return this.httpClient.post(url, {})\r\n  }\r\n\r\n\r\n}"],"names":[],"sourceRoot":"webpack:///"}