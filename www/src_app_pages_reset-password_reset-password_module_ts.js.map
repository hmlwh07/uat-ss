{"version":3,"file":"src_app_pages_reset-password_reset-password_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;AAAiJ;AAC3C;AACvD;;AAEP;AACC;AACC;;AAE1C;AACA,wDAAwD;AACxD,gBAAgB,8DAAuB;AACvC,IAAI,4DAAqB;AACzB,IAAI,4DAAqB;AACzB,IAAI,4DAAqB;AACzB,IAAI,wDAAiB,kFAAkF,oBAAoB,2DAAoB,OAAO,gCAAgC,eAAe,2DAAoB,IAAI,kCAAkC,yFAAyF,oBAAoB,2DAAoB,OAAO,gCAAgC,eAAe,2DAAoB,IAAI,8CAA8C,uGAAuG,oBAAoB,2DAAoB,OAAO,gCAAgC,eAAe,2DAAoB,IAAI,sCAAsC,yGAAyG,oBAAoB,2DAAoB,OAAO,gCAAgC,eAAe,2DAAoB,IAAI,uCAAuC,2GAA2G,oBAAoB,2DAAoB,OAAO,gCAAgC,eAAe,2DAAoB,IAAI,oCAAoC;AAC1wC,IAAI,0DAAmB;AACvB,IAAI,0DAAmB;AACvB,IAAI,0DAAmB;AACvB,EAAE;AACF;AACA;AACA,mBAAmB,2DAAoB;AACvC,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,yDAAkB;AACtB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB;AACA;AACA;AACA,+BAA+B,qDAAS;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,uDAAY;AACzC,wBAAwB,uDAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD,sCAAsC,uDAAW,QAAQ,+DAAmB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uEAAuE;AACvE,0CAA0C,+DAAwB,GAAG,sHAAsH;AAC3L,QAAQ,yDAAkB;AAC1B,MAAM;AACN;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,OAAO,sEAAsE;AAC7E,QAAQ,wDAAiB,2EAA2E,6BAA6B;AACjI,OAAO,YAAY,wDAAwD,aAAa,sCAAsC,aAAa,kEAA2B,ygBAAygB;AAC/qB,QAAQ,4DAAqB;AAC7B,QAAQ,wDAAiB;AACzB,QAAQ,0DAAmB;AAC3B,MAAM;AACN,QAAQ,wDAAiB;AACzB,QAAQ,uDAAgB;AACxB,QAAQ,wDAAiB;AACzB,OAAO,4BAA4B,QAAQ,4DAAoB,EAAE,gEAA2B,EAAE,kDAAa,EAAE,oDAAc,EAAE,oDAAc,EAAE,gEAA2B,EAAE,8DAAyB,EAAE,2DAAsB,EAAE,gEAA2B,sBAAsB,wDAAwD,aAAa,sCAAsC,aAAa,kDAAkD,cAAc,iDAAiD,eAAe,kCAAkC,WAAW,YAAY,kBAAkB,kBAAkB,yBAAyB,kBAAkB,UAAU,2CAA2C,WAAW,wBAAwB;AACtuB;AACA,eAAe,MAAM,gDAAK,EAAE;AAC5B,gBAAgB,MAAM,gDAAK,EAAE;AAC7B,eAAe,MAAM,gDAAK,EAAE;AAC5B,kBAAkB,MAAM,iDAAM,EAAE;AAChC,aAAa,MAAM,iDAAM,EAAE;AAC3B,yBAAyB,MAAM,uDAAY,8BAA8B;AACzE,gBAAgB,MAAM,uDAAY,gCAAgC;AAClE;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA;AACA,wKAAwK;AACxK,iCAAiC,yEAA8B;AAC/D,mDAAmD,aAAa,mBAAmB,aAAa,+BAA+B,cAAc,8BAA8B,eAAe,eAAe,WAAW,YAAY,kBAAkB,kBAAkB,yBAAyB,kBAAkB,UAAU,wBAAwB,WAAW;AAC5V,aAAa;AACb,KAAK,iBAAiB,YAAY,IAAI;AACtC,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,uDAAY;AAC9B;AACA,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,uDAAY;AAC9B;AACA,SAAS,GAAG,IAAI;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D,sCAAsC,+DAAwB,GAAG,gIAAgI;AACjM,QAAQ,wDAAiB,2EAA2E,+BAA+B;AACnI,OAAO,YAAY,yCAAyC;AAC5D;AACA,gBAAgB,MAAM,gDAAK,4BAA4B;AACvD,kBAAkB,MAAM,uDAAY,kCAAkC;AACtE;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA;AACA,aAAa;AACb,KAAK,iBAAiB,YAAY,IAAI;AACtC,kBAAkB,uDAAY;AAC9B;AACA,SAAS;AACT,kBAAkB,gDAAK;AACvB;AACA,SAAS,GAAG,IAAI;;AAEhB;AACA;AACA,iEAAiE;AACjE,uCAAuC,8DAAuB,GAAG,yBAAyB;AAC1F,uCAAuC,8DAAuB,GAAG,WAAW,+DAAmB,EAAE,uDAAW,EAAE,yDAAY,IAAI;AAC9H,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,mDAAQ;AACtB;AACA;AACA,0BAA0B,+DAAmB,EAAE,uDAAW,EAAE,yDAAY;AACxE;AACA,aAAa;AACb,KAAK,iBAAiB;AACtB,eAAe,mDAAmD,gEAAyB,sBAAsB,4BAA4B,kDAAkD,yBAAyB,QAAQ,+DAAmB,EAAE,uDAAW,EAAE,yDAAY,IAAI,yBAAyB,kCAAkC,IAAI;;AAEjV;AACA;AACA;;AAEA;AACA;AACA;;AAE2E;;;;;;;;;;;;;;;;;;;;;;;;;ACvVlB;AACG;AAE0D;IAOzG,iBAAiB,SAAjB,iBAAiB;IAsB5B,YAAoB,UAAsB,EAAU,KAAqB,EAAU,oBAA0C,EAAS,gBAAiC,EAAS,qBAA2C;QAAvM,eAAU,GAAV,UAAU,CAAY;QAAU,UAAK,GAAL,KAAK,CAAgB;QAAU,yBAAoB,GAApB,oBAAoB,CAAsB;QAAS,qBAAgB,GAAhB,gBAAgB,CAAiB;QAAS,0BAAqB,GAArB,qBAAqB,CAAsB;QApB3N,mBAAc,GAAsB;YAClC,SAAS,EAAE,CAAC;YACZ,SAAS,EAAE,IAAI;YACf,SAAS,EAAE;gBACT,QAAQ,EAAE,oBAAoB;gBAC9B,KAAK,EAAE,gBAAgB;gBACvB,WAAW,EAAE,uBAAuB;gBACpC,aAAa,EAAE,wBAAwB;gBACvC,YAAY,EAAE,wBAAwB;gBACtC,UAAU,EAAE,sBAAsB;aACnC;SACF,CAAC;QAEF,gBAAW,GAAW,EAAE;QACxB,mBAAc,GAAW,EAAE;QAC3B,kBAAa,GAAY,KAAK;QAC9B,YAAO,GAAW,EAAE;QACpB,aAAQ,GAAY,KAAK,CAAC;QAC1B,gBAAW,GAAS,KAAK;IAEsM,CAAC;IAEhO,QAAQ;QACN,IAAI,CAAC,SAAS,EAAE;IAClB,CAAC;IACD,SAAS;QACP,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,UAAU,EAAE,CAAC;QAElB,IAAI,CAAC,aAAa,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC;QACzC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,EAAE;YAC9B,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,GAAG,EAAE;gBAC/B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;gBAChC,IAAI,IAAI,CAAC,OAAO,KAAK,CAAC,EAAE;oBACtB,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBAC7B,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;iBAC5B;YACH,CAAC,EAAE,IAAI,CAAC;SACT;IAEH,CAAC;IACD,UAAU;QACR,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,SAAS,EAAE;aAClC,IAAI,CAAC,CAAC,GAAQ,EAAE,EAAE;YACjB,IAAI,GAAG,CAAC,MAAM,EAAE;gBACd,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,GAAG,CAAC;gBAC9B,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC,KAAK;aAC7B;QACH,CAAC,CACA;IACL,CAAC;IACD,SAAS;QACP,IAAI,CAAC,WAAW,GAAC,IAAI;QACrB,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;QAC/B,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW;QAC5B,IAAI,QAAQ,GAAC,EAAC,GAAG,EAAC,KAAK,EAAC;QACxB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,SAAS,EAAE;aAC7C,IAAI,CAAC,CAAC,GAAQ,EAAE,EAAE;YACjB,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,GAAG,CAAC;YAC7B,IAAI,GAAG,CAAC,MAAM,EAAE;gBACd,IAAI,CAAC,WAAW,GAAC,KAAK;gBACtB,IAAI,CAAC,cAAc,GAAG,GAAG,CAAC,KAAK;gBAC/B,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,GAAG,CAAC;gBAC7B,IAAI,CAAC,aAAa,EAAE;aACrB;QACH,CAAC,CACA;IACL,CAAC;IACD,aAAa;QACX,IAAI,QAAQ,GAAC;YACX,eAAe,EAAC,IAAI,CAAC,IAAI;YACzB,KAAK,EAAC,IAAI,CAAC,cAAc;SAC1B;QACD,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,SAAS,EAAE;aACjD,IAAI,CAAC,CAAC,GAAQ,EAAE,EAAE;YACjB,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,GAAG,CAAC;YACjC,IAAI,GAAG,CAAC,MAAM,EAAE;gBACd,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;aAC/B;QACH,CAAC,CACA;IACL,CAAC;IACD,MAAM;QACJ,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;IACtB,CAAC;IACD,cAAc,CAAC,KAAK;QAClB,IAAI,CAAC,OAAO,GAAG,KAAK;QACnB,OAAO,CAAC,GAAG,CAAC,SAAS,EAAG,IAAI,CAAC,OAAO,CAAC;IACxC,CAAC;IACD,eAAe,CAAC,KAAK;IAErB,CAAC;CACF;;YAtGQ,+DAAU;YAFV,sEAAc;YAEF,yEAAoB;YAAE,qEAAgB;YAAE,0EAAqB;;;mBAQ/E,gDAAK;;AADK,iBAAiB;IAL7B,wDAAS,CAAC;QACT,QAAQ,EAAE,eAAe;QACzB,4LAAyC;;KAE1C,CAAC;GACW,iBAAiB,CA+F7B;AA/F6B;;;;;;;;;;;;;;;;;;;;;;;;;;ACVoB;AACkB;AACd;AAEc;AAC+B;IAOtF,sBAAsB,SAAtB,sBAAsB;IAQjC,YAAoB,KAAe,EAAU,oBAA0C,EAC7E,UAAsB,EAAS,qBAA2C;QADhE,UAAK,GAAL,KAAK,CAAU;QAAU,yBAAoB,GAApB,oBAAoB,CAAsB;QAC7E,eAAU,GAAV,UAAU,CAAY;QAAS,0BAAqB,GAArB,qBAAqB,CAAsB;QAPpF,YAAO,GAAY,KAAK;QACxB,aAAQ,GAAY,KAAK;IAM+D,CAAC;IAEzF,QAAQ;QACN,IAAI,CAAC,QAAQ,EAAE;IACjB,CAAC;IACD,QAAQ;QACN,IAAI,CAAC,SAAS,GAAG,IAAI,qDAAS,CAAC;YAC7B,WAAW,EAAE,IAAI,uDAAW,CAAC,IAAI,EAAE,CAAC,+DAAmB,CAAC,CAAC;YACzD,WAAW,EAAE,IAAI,uDAAW,CAAC,IAAI,EAAE,CAAC,+DAAmB,EAAC,gEAAoB,CAAC,CAAC,CAAC,EAAG,CAAC;YACnF,iGAAiG;YACjG,kBAAkB,EAAE,IAAI,uDAAW,CAAC,IAAI,EAAE,CAAC,+DAAmB,EAAC,gEAAoB,CAAC,CAAC,CAAC,CAAC,CAAC;SAEzF,CACA;IAEH,CAAC;IAED,WAAW;QACT,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;QACjC,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,EAAE;YACxC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,SAAS,EAAE;iBAC9D,IAAI,CAAC,CAAC,GAAQ,EAAE,EAAE;gBACjB,OAAO,CAAC,GAAG,CAAC,aAAa,EAAC,GAAG,CAAC;gBAC9B,IAAG,GAAG,EAAC;oBACL,IAAI,QAAQ,CAAC;oBACb,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,6EAAiB,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;oBAC/E,QAAQ,CAAC,iBAAiB,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK;oBACtD,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE;wBACtC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;wBAChB,IAAI,GAAG,EAAE;4BACP,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE;yBACvB;oBACH,CAAC,CAAC;iBACH;YACD,CAAC,CAEF;SAIJ;IAEH,CAAC;IACD,MAAM;QACJ,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE;IACxB,CAAC;IAGD,cAAc,CAAC,WAAmB;QAChC,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QACrD,OAAO,OAAO,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC;IAC7D,CAAC;IAED,gBAAgB,CAAC,WAAmB;QAClC,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QACrD,OAAO,OAAO,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC;IAC/D,CAAC;IAED,eAAe,CAAC,UAAU,EAAE,WAAW;QACrC,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QACrD,OAAO,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC;IAC5E,CAAC;IAED,gBAAgB,CAAC,WAAW;QAC1B,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QACrD,OAAO,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,OAAO,CAAC;IAC1C,CAAC;IAGD,eAAe;QACb,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,oBAAoB,CAAC,IAAI,IAAI,EAAE;YACrG,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YACrD,MAAM,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;YACnE,IAAI,MAAM,GAAG,QAAQ,KAAK,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;YACzD,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC;SACxC;QACD,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC,OAAO;SAC7D;IACH,CAAC;IAGD,iBAAiB,CAAC,OAAO,EAAE,kBAAkB;QAC3C,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACrD,MAAM,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC;QAEpE,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE,eAAe,CAAC,KAAK,CAAC;QAErD,IAAI,WAAW,CAAC,KAAK,IAAI,eAAe,CAAC,KAAK,EAAE;YAC9C,IAAI,CAAC,OAAO,GAAG,IAAI;YACnB,OAAO,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,IAAI,eAAe,CAAC,OAAO,CAAC,CAAC;SAChG;aAAM;YACL,IAAI,CAAC,OAAO,GAAG,KAAK;YACpB,OAAO,eAAe,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,IAAI,eAAe,CAAC,OAAO,CAAC,CAAC;SACpG;IACH,CAAC;CACF;;YAnHQ,gEAAQ;YAGI,yEAAoB;YAAhC,+DAAU;YAAwB,0EAAqB;;AAOnD,sBAAsB;IALlC,wDAAS,CAAC;QACT,QAAQ,EAAE,oBAAoB;QAC9B,iMAA8C;;KAE/C,CAAC;GACW,sBAAsB,CAyGlC;AAzGkC;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZM;AACM;AACmB;AACK;AACO;AAC/B;AACqB;AACD;AACC;AAClB;AACkB;IAsBvD,mBAAmB,SAAnB,mBAAmB;CAAI;AAAvB,mBAAmB;IApB/B,uDAAQ,CAAC;QACR,YAAY,EAAE,CAAC,6EAAsB,EAAE,6EAAiB,CAAC;QACzD,OAAO,EAAE;YACP,yDAAY;YACZ,uDAAW;YACX,+DAAmB;YACnB,sEAAc;YACd,iEAAS;YACT,6EAAmB;YACnB,sFAAmB;YACnB,6DAAiB;YACjB,wEAAe;YACf,mEAAqB,CAAC;gBACpB;oBACE,IAAI,EAAE,EAAE;oBACR,SAAS,EAAE,6EAAsB;iBAClC;aACF,CAAC;SACH;KACF,CAAC;GACW,mBAAmB,CAAI;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;AChCkB;AACP;AACqB;AACO;AAEvE,MAAM,sBAAsB,GAAG,GAAG,yEAAkB,iBAAiB,CAAC;AACtE,MAAM,eAAe,GAAG,GAAG,yEAAkB,MAAM,CAAC;AACpD,MAAM,kBAAkB,GAAG,GAAG,yEAAkB,aAAa,CAAC;AAC9D,MAAM,uBAAuB,GAAG,GAAG,yEAAkB,kBAAkB,CAAC;IAK3D,qBAAqB,SAArB,qBAAsB,SAAQ,4EAAgC;IACzE,YAAsB,UAAsB;QAC1C,KAAK,CAAC,UAAU,EAAE,uBAAuB,CAAC,CAAC;QADvB,eAAU,GAAV,UAAU,CAAY;IAE5C,CAAC;CAEF;;YAlBQ,4DAAU;;AAaN,qBAAqB;IAHjC,yDAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,qBAAqB,CAKjC;AALiC;IAUrB,oBAAoB,SAApB,oBAAqB,SAAQ,4EAAgC;IACxE,YAAsB,UAAsB;QAC1C,KAAK,CAAC,UAAU,EAAE,sBAAsB,CAAC,CAAC;QADtB,eAAU,GAAV,UAAU,CAAY;IAE5C,CAAC;CAEF;;YA5BQ,4DAAU;;AAuBN,oBAAoB;IAHhC,yDAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,oBAAoB,CAKhC;AALgC;IAepB,UAAU,SAAV,UAAW,SAAQ,4EAAgC;IAC9D,YAAsB,UAAsB;QAC1C,KAAK,CAAC,UAAU,EAAE,eAAe,CAAC,CAAC;QADf,eAAU,GAAV,UAAU,CAAY;IAE5C,CAAC;CAGF;;YA5CQ,4DAAU;;AAsCN,UAAU;IAHtB,yDAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,UAAU,CAMtB;AANsB;IAWV,gBAAgB,SAAhB,gBAAiB,SAAQ,4EAAgC;IACpE,YAAsB,UAAsB;QAC1C,KAAK,CAAC,UAAU,EAAE,kBAAkB,CAAC,CAAC;QADlB,eAAU,GAAV,UAAU,CAAY;IAE5C,CAAC;CAGF;;YAvDQ,4DAAU;;AAiDN,gBAAgB;IAH5B,yDAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,gBAAgB,CAM5B;AAN4B;;;;;;;;;;;;;;;ACjD7B,iEAAe,8WAA8W,gRAAgR,8EAA8E,cAAc,8RAA8R,yIAAyI,UAAU,6FAA6F,khBAAkhB;;;;;;;;;;;;;;ACAzwD,iEAAe,kDAAkD,wBAAwB,wGAAwG,qaAAqa,wBAAwB,miDAAmiD,wBAAwB,+hDAA+hD,wBAAwB,6vDAA6vD,2BAA2B,iBAAiB,sNAAsN,kWAAkW,uSAAuS","sources":["./node_modules/ngx-otp-input/__ivy_ngcc__/fesm2015/ngx-otp-input.js","./src/app/pages/reset-password/otp-modal/otp-modal.component.ts","./src/app/pages/reset-password/reset-password.component.ts","./src/app/pages/reset-password/reset-password.module.ts","./src/app/pages/reset-password/reset-password.service.ts","./src/app/pages/reset-password/otp-modal/otp-modal.component.html","./src/app/pages/reset-password/reset-password.component.html"],"sourcesContent":["import { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChildren, HostListener, Directive, NgModule } from '@angular/core';\nimport { FormArray, FormControl, Validators, ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/forms';\nimport * as ɵngcc2 from '@angular/common';\n\nconst _c0 = [\"otpInputElement\"];\nfunction NgxOtpInputComponent_div_1_Template(rf, ctx) { if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵelementStart(1, \"label\");\n    ɵngcc0.ɵɵelementStart(2, \"input\", 3, 4);\n    ɵngcc0.ɵɵlistener(\"focus\", function NgxOtpInputComponent_div_1_Template_input_focus_2_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5); const i_r2 = restoredCtx.index; const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.handleFocus(i_r2); })(\"keyup\", function NgxOtpInputComponent_div_1_Template_input_keyup_2_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5); const i_r2 = restoredCtx.index; const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.handleKeyup($event.key, i_r2); })(\"keyup.arrowLeft\", function NgxOtpInputComponent_div_1_Template_input_keyup_arrowLeft_2_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5); const i_r2 = restoredCtx.index; const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.handleLeftArrow(i_r2); })(\"keyup.arrowRight\", function NgxOtpInputComponent_div_1_Template_input_keyup_arrowRight_2_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5); const i_r2 = restoredCtx.index; const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.handleRightArrow(i_r2); })(\"keydown.backspace\", function NgxOtpInputComponent_div_1_Template_input_keydown_backspace_2_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5); const i_r2 = restoredCtx.index; const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.handleKeydown(i_r2); });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const control_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r0.config.classList == null ? null : ctx_r0.config.classList.inputBox);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.getAriaLabelByIndex(i_r2));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"id\", \"ngx-otp-input-\" + i_r2)(\"formControl\", control_r1)(\"ngxOtpPattern\", ctx_r0.pattern)(\"type\", ctx_r0.config.isPasswordInput ? \"password\" : \"text\")(\"ngClass\", ctx_r0.classList[i_r2]);\n} }\nclass NgxOtpInputComponent {\n    constructor() {\n        this.ngxOtpArray = new FormArray([]);\n        this.focusedInputHasValue = false;\n        this.lastFocus = 0;\n        this.defaultAriaLabel = 'One time password input';\n        this.ariaLabels = [];\n        this.classList = [];\n        this.disable = false;\n        this.otpChange = new EventEmitter();\n        this.fill = new EventEmitter();\n    }\n    get ngxOtpArrayControls() {\n        return this.ngxOtpArray.controls;\n    }\n    set status(status) {\n        this.ngxOtpStatus = status;\n        this.setInputClasses();\n    }\n    onPaste(event) {\n        event.preventDefault();\n        this.setValue(event.clipboardData.getData('text'));\n    }\n    ngOnInit() {\n        this.setUpOtpForm();\n        this.setUpAriaLabels();\n        this.setInputClasses();\n        this.otpFormChangeListener();\n        this.handleDisable(this.disable);\n        if (this.config.autoblur === undefined) {\n            this.config.autoblur = true;\n        }\n    }\n    ngAfterViewInit() {\n        if (this.config.numericInputMode || !this.config.pattern) {\n            this.otpInputElements.map((element) => {\n                element.nativeElement.setAttribute('inputmode', 'numeric');\n                element.nativeElement.setAttribute('pattern', '[0-9]*');\n            });\n        }\n        if (this.config.autofocus) {\n            this.setFocus(0);\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes.hasOwnProperty('disable')) {\n            this.handleDisable(this.disable);\n        }\n    }\n    ngOnDestroy() {\n        this.ngxOtpArray$.unsubscribe();\n    }\n    getAriaLabelByIndex(index) {\n        return this.ariaLabels[index]\n            ? this.ariaLabels[index]\n            : this.defaultAriaLabel;\n    }\n    handleFocus(index) {\n        this.lastFocus = index;\n        this.getInputElementByIndex(index).select();\n    }\n    handleKeyup(value, index) {\n        if (this.pattern.test(value) && value !== 'Backspace') {\n            this.getFormControlByIndex(index).setValue(value); // prevent fast type errors\n            this.stepForward(index);\n        }\n        else if (value === 'Backspace') {\n            this.stepBackward(index);\n        }\n        this.setInputClasses();\n    }\n    handleKeydown(index) {\n        this.focusedInputHasValue = !!this.getFormControlByIndex(index).value;\n    }\n    handleLeftArrow(index) {\n        if (index > 0) {\n            this.setFocus(index - 1);\n        }\n    }\n    handleRightArrow(index) {\n        if (index < this.config.otpLength - 1) {\n            this.setFocus(index + 1);\n        }\n    }\n    clear() {\n        this.ngxOtpArray.reset();\n        this.setInputClasses();\n    }\n    setUpOtpForm() {\n        for (let i = 0; i < this.config.otpLength; i++) {\n            this.ngxOtpArray.push(new FormControl(null, [Validators.required]));\n        }\n        this.pattern = this.config.pattern || /^\\d+$/;\n    }\n    setUpAriaLabels() {\n        if (this.config.ariaLabels) {\n            Array.isArray(this.config.ariaLabels)\n                ? (this.ariaLabels = this.config.ariaLabels)\n                : (this.ariaLabels = new Array(this.config.otpLength).fill(this.config.ariaLabels));\n        }\n    }\n    setInputClasses() {\n        var _a, _b;\n        const inputEntry = [];\n        const classList = this.config.classList;\n        for (let i = 0; i < this.config.otpLength; i++) {\n            const isFilled = this.isInputFilled(i)\n                ? ((_a = this.config.classList) === null || _a === void 0 ? void 0 : _a.inputFilled) || ''\n                : '';\n            const isDisabled = this.disable\n                ? ((_b = this.config.classList) === null || _b === void 0 ? void 0 : _b.inputDisabled) || 'ngx-otp-input-disabled'\n                : '';\n            let status = '';\n            if (this.ngxOtpStatus === 'success') {\n                status = this.config.classList.inputSuccess;\n            }\n            else if (this.ngxOtpStatus === 'error') {\n                status = this.config.classList.inputError;\n            }\n            inputEntry[i] = [(classList === null || classList === void 0 ? void 0 : classList.input) || '', isFilled, isDisabled, status];\n        }\n        this.classList = inputEntry;\n    }\n    setValue(value) {\n        if (this.pattern.test(value)) {\n            let lastIndex = 0;\n            value\n                .split('')\n                .slice(0, this.config.otpLength)\n                .map((character, index) => {\n                this.getFormControlByIndex(index).setValue(character);\n                lastIndex = index;\n            });\n            this.setInputClasses();\n            this.setFocusAfterValueSet(lastIndex);\n        }\n    }\n    handleDisable(disable) {\n        var _a, _b;\n        disable ? (_a = this.ngxOtpArray) === null || _a === void 0 ? void 0 : _a.disable() : (_b = this.ngxOtpArray) === null || _b === void 0 ? void 0 : _b.enable();\n        this.setInputClasses();\n    }\n    stepForward(index) {\n        if (this.ngxOtpArray.valid && this.config.autoblur) {\n            this.removeFocus(index);\n        }\n        else if (index < this.config.otpLength - 1) {\n            this.setFocus(index + 1);\n        }\n    }\n    stepBackward(index) {\n        if (!this.focusedInputHasValue && index > 0) {\n            this.setFocus(index - 1);\n        }\n    }\n    setFocusAfterValueSet(lastIndex) {\n        if (lastIndex < this.config.otpLength - 1) {\n            this.setFocus(lastIndex + 1);\n        }\n        else {\n            this.removeFocus(this.lastFocus);\n        }\n    }\n    setFocus(index) {\n        this.getInputElementByIndex(index).focus();\n    }\n    removeFocus(index) {\n        this.getInputElementByIndex(index).blur();\n    }\n    isInputFilled(index) {\n        var _a;\n        return (_a = this.getFormControlByIndex(index)) === null || _a === void 0 ? void 0 : _a.valid;\n    }\n    getInputElementByIndex(index) {\n        return this.otpInputElements.toArray()[index].nativeElement;\n    }\n    getFormControlByIndex(index) {\n        return this.ngxOtpArray.controls[index];\n    }\n    otpFormChangeListener() {\n        this.ngxOtpArray$ = this.ngxOtpArray.valueChanges.subscribe((values) => {\n            this.otpChange.emit(values);\n            if (this.ngxOtpArray.valid) {\n                this.fill.emit(values.join(''));\n            }\n        });\n    }\n}\nNgxOtpInputComponent.ɵfac = function NgxOtpInputComponent_Factory(t) { return new (t || NgxOtpInputComponent)(); };\nNgxOtpInputComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NgxOtpInputComponent, selectors: [[\"ngx-otp-input\"]], viewQuery: function NgxOtpInputComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.otpInputElements = _t);\n    } }, hostBindings: function NgxOtpInputComponent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"paste\", function NgxOtpInputComponent_paste_HostBindingHandler($event) { return ctx.onPaste($event); });\n    } }, inputs: { disable: \"disable\", status: \"status\", config: \"config\" }, outputs: { otpChange: \"otpChange\", fill: \"fill\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 2, consts: [[1, \"ngx-otp-input-container\", 3, \"ngClass\"], [\"class\", \"ngx-otp-input-box\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"ngx-otp-input-box\", 3, \"ngClass\"], [\"maxlength\", \"1\", \"autocomplete\", \"off\", \"autocapitalize\", \"off\", \"spellcheck\", \"false\", 1, \"ngx-otp-input\", 3, \"id\", \"formControl\", \"ngxOtpPattern\", \"type\", \"ngClass\", \"focus\", \"keyup\", \"keyup.arrowLeft\", \"keyup.arrowRight\", \"keydown.backspace\"], [\"otpInputElement\", \"\"]], template: function NgxOtpInputComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"form\", 0);\n        ɵngcc0.ɵɵtemplate(1, NgxOtpInputComponent_div_1_Template, 4, 7, \"div\", 1);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.config.classList == null ? null : ctx.config.classList.container);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.ngxOtpArrayControls);\n    } }, directives: function () { return [ɵngcc1.ɵNgNoValidate, ɵngcc1.NgControlStatusGroup, ɵngcc1.NgForm, ɵngcc2.NgClass, ɵngcc2.NgForOf, ɵngcc1.DefaultValueAccessor, ɵngcc1.MaxLengthValidator, ɵngcc1.NgControlStatus, ɵngcc1.FormControlDirective, PatternDirective]; }, styles: [\".ngx-otp-input-container[_ngcontent-%COMP%]{display:flex}.ngx-otp-input-box[_ngcontent-%COMP%]{margin:0 5px}.ngx-otp-input-box[_ngcontent-%COMP%]:first-child{margin-left:0}.ngx-otp-input-box[_ngcontent-%COMP%]:last-child{margin-right:0}.ngx-otp-input[_ngcontent-%COMP%]{width:35px;height:35px;text-align:center;font-size:1.25rem;border:1px solid #212121;border-radius:4px;outline:0}.ngx-otp-input-disabled[_ngcontent-%COMP%]{opacity:.3}\"], changeDetection: 0 });\nNgxOtpInputComponent.propDecorators = {\n    config: [{ type: Input }],\n    disable: [{ type: Input }],\n    status: [{ type: Input }],\n    otpChange: [{ type: Output }],\n    fill: [{ type: Output }],\n    otpInputElements: [{ type: ViewChildren, args: ['otpInputElement',] }],\n    onPaste: [{ type: HostListener, args: ['paste', ['$event'],] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxOtpInputComponent, [{\n        type: Component,\n        args: [{\n                // tslint:disable-next-line:component-selector\n                selector: 'ngx-otp-input',\n                template: \"<form [ngClass]=\\\"config.classList?.container\\\" class=\\\"ngx-otp-input-container\\\">\\n  <div\\n    *ngFor=\\\"let control of ngxOtpArrayControls; let i = index\\\"\\n    [ngClass]=\\\"config.classList?.inputBox\\\"\\n    class=\\\"ngx-otp-input-box\\\"\\n  >\\n    <label [attr.aria-label]=\\\"getAriaLabelByIndex(i)\\\">\\n      <input\\n        #otpInputElement\\n        [id]=\\\"'ngx-otp-input-' + i\\\"\\n        [formControl]=\\\"control\\\"\\n        [ngxOtpPattern]=\\\"pattern\\\"\\n        [type]=\\\"config.isPasswordInput ? 'password' : 'text'\\\"\\n        [ngClass]=\\\"classList[i]\\\"\\n        (focus)=\\\"handleFocus(i)\\\"\\n        (keyup)=\\\"handleKeyup($event.key, i)\\\"\\n        (keyup.arrowLeft)=\\\"handleLeftArrow(i)\\\"\\n        (keyup.arrowRight)=\\\"handleRightArrow(i)\\\"\\n        (keydown.backspace)=\\\"handleKeydown(i)\\\"\\n        class=\\\"ngx-otp-input\\\"\\n        maxlength=\\\"1\\\"\\n        autocomplete=\\\"off\\\"\\n        autocapitalize=\\\"off\\\"\\n        spellcheck=\\\"false\\\"\\n      />\\n    </label>\\n  </div>\\n</form>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".ngx-otp-input-container{display:flex}.ngx-otp-input-box{margin:0 5px}.ngx-otp-input-box:first-child{margin-left:0}.ngx-otp-input-box:last-child{margin-right:0}.ngx-otp-input{width:35px;height:35px;text-align:center;font-size:1.25rem;border:1px solid #212121;border-radius:4px;outline:0}.ngx-otp-input-disabled{opacity:.3}\"]\n            }]\n    }], function () { return []; }, { disable: [{\n            type: Input\n        }], otpChange: [{\n            type: Output\n        }], fill: [{\n            type: Output\n        }], status: [{\n            type: Input\n        }], onPaste: [{\n            type: HostListener,\n            args: ['paste', ['$event']]\n        }], config: [{\n            type: Input\n        }], otpInputElements: [{\n            type: ViewChildren,\n            args: ['otpInputElement']\n        }] }); })();\n\nclass PatternDirective {\n    constructor() {\n        // allowed keys apart from numeric characters\n        this.allowedKeys = [\n            'Backspace',\n            'ArrowLeft',\n            'ArrowRight',\n            'Escape',\n            'Tab',\n        ];\n    }\n    onKeyDown(e) {\n        if (this.allowedKeys.includes(e.key) ||\n            (e.key === 'a' && e.ctrlKey === true) || // Allow: Ctrl+A\n            (e.key === 'c' && e.ctrlKey === true) || // Allow: Ctrl+C\n            (e.key === 'v' && e.ctrlKey === true) || // Allow: Ctrl+V\n            (e.key === 'x' && e.ctrlKey === true) || // Allow: Ctrl+X\n            (e.key === 'a' && e.metaKey === true) || // Cmd+A (Mac)\n            (e.key === 'c' && e.metaKey === true) || // Cmd+C (Mac)\n            (e.key === 'v' && e.metaKey === true) || // Cmd+V (Mac)\n            (e.key === 'x' && e.metaKey === true) // Cmd+X (Mac)\n        ) {\n            return; // let it happen, don't do anything\n        }\n        else if (!this.pattern.test(e.key)) {\n            e.preventDefault();\n        }\n    }\n}\nPatternDirective.ɵfac = function PatternDirective_Factory(t) { return new (t || PatternDirective)(); };\nPatternDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: PatternDirective, selectors: [[\"\", \"ngxOtpPattern\", \"\"]], hostBindings: function PatternDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function PatternDirective_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); });\n    } }, inputs: { pattern: [\"ngxOtpPattern\", \"pattern\"] } });\nPatternDirective.propDecorators = {\n    pattern: [{ type: Input, args: ['ngxOtpPattern',] }],\n    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PatternDirective, [{\n        type: Directive,\n        args: [{\n                // tslint:disable-next-line:directive-selector\n                selector: '[ngxOtpPattern]'\n            }]\n    }], function () { return []; }, { onKeyDown: [{\n            type: HostListener,\n            args: ['keydown', ['$event']]\n        }], pattern: [{\n            type: Input,\n            args: ['ngxOtpPattern']\n        }] }); })();\n\nclass NgxOtpInputModule {\n}\nNgxOtpInputModule.ɵfac = function NgxOtpInputModule_Factory(t) { return new (t || NgxOtpInputModule)(); };\nNgxOtpInputModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgxOtpInputModule });\nNgxOtpInputModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[ReactiveFormsModule, FormsModule, CommonModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxOtpInputModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [NgxOtpInputComponent, PatternDirective],\n                imports: [ReactiveFormsModule, FormsModule, CommonModule],\n                exports: [NgxOtpInputComponent]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxOtpInputModule, { declarations: function () { return [NgxOtpInputComponent, PatternDirective]; }, imports: function () { return [ReactiveFormsModule, FormsModule, CommonModule]; }, exports: function () { return [NgxOtpInputComponent]; } }); })();\n\n/*\n * Public API Surface of ngx-otp-input\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxOtpInputComponent, NgxOtpInputModule, PatternDirective as ɵa };\n\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgxOtpInputConfig } from 'ngx-otp-input';\r\nimport { OTPService, resetPasswordService, VerifyOTPService, verifyPasswordService } from '../reset-password.service';\r\n\r\n@Component({\r\n  selector: 'app-otp-modal',\r\n  templateUrl: './otp-modal.component.html',\r\n  styleUrls: ['./otp-modal.component.scss']\r\n})\r\nexport class OtpModalComponent implements OnInit {\r\n  @Input() data: any\r\n  otpInputConfig: NgxOtpInputConfig = {\r\n    otpLength: 6,\r\n    autofocus: true,\r\n    classList: {\r\n      inputBox: 'my-super-box-class',\r\n      input: 'my-super-class',\r\n      inputFilled: 'my-super-filled-class',\r\n      inputDisabled: 'my-super-disable-class',\r\n      inputSuccess: 'my-super-success-class',\r\n      inputError: 'my-super-error-class',\r\n    },\r\n  };\r\n  optCode: any;\r\n  verifyToken: string = \"\"\r\n  verifyOTPToken: string = \"\"\r\n  requestStatus: boolean = false\r\n  counter: number = 60\r\n  otpInput: boolean = false;\r\n  isSubmitted:boolean=false\r\n  private interval: any;\r\n  constructor(private OTPService: OTPService, private modal: NgbActiveModal, private resetPasswordService: resetPasswordService,private VerifyOTPService:VerifyOTPService,private verifyPasswordService:verifyPasswordService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.doRequest()\r\n  }\r\n  doRequest() {\r\n    this.otpInput = true;\r\n    this.requestOtp();\r\n\r\n    this.requestStatus = !this.requestStatus;\r\n    this.counter = 60;\r\n    if (this.requestStatus == true) {\r\n      this.interval = setInterval(() => {\r\n        this.counter = this.counter - 1;\r\n        if (this.counter === 0) {\r\n          clearInterval(this.interval);\r\n          this.requestStatus = false;\r\n        }\r\n      }, 1000)\r\n    }\r\n\r\n  }\r\n  requestOtp() {\r\n    this.OTPService.findAll().toPromise()\r\n      .then((res: any) => {\r\n        if (res.status) {\r\n          console.log(\"requestOtp\", res)\r\n          this.verifyToken = res.token\r\n        }\r\n      }\r\n      )\r\n  }\r\n  verifyOTP() {\r\n    this.isSubmitted=true\r\n    let otp = this.optCode.join(\"\")\r\n    let token = this.verifyToken\r\n    let postData={otp,token}\r\n    this.VerifyOTPService.save(postData).toPromise()\r\n      .then((res: any) => {\r\n        console.log(\"verifyOTP\", res)\r\n        if (res.status) {\r\n          this.isSubmitted=false\r\n          this.verifyOTPToken = res.token\r\n          console.log(\"verifyOTP\", res)\r\n          this.resetPassword()\r\n        }\r\n      }\r\n      )\r\n  }\r\n  resetPassword() {\r\n    let postData={\r\n      passwordRequest:this.data,\r\n      token:this.verifyOTPToken\r\n    }\r\n    this.resetPasswordService.save(postData).toPromise()\r\n      .then((res: any) => {\r\n        console.log(\"resetPassword\", res)\r\n        if (res.status) {\r\n          this.modal.dismiss(res.status)\r\n        }\r\n      }\r\n      )\r\n  }\r\n  cancel(){\r\n    this.modal.dismiss()\r\n  }\r\n  handeOtpChange(event) {\r\n    this.optCode = event\r\n     console.log(\"optCode\",  this.optCode)\r\n  }\r\n  handleFillEvent(event) {\r\n\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgxOtpInputConfig } from 'ngx-otp-input';\r\nimport { OtpModalComponent } from './otp-modal/otp-modal.component';\r\nimport { OTPService, resetPasswordService, verifyPasswordService } from './reset-password.service';\r\n\r\n@Component({\r\n  selector: 'app-reset-password',\r\n  templateUrl: './reset-password.component.html',\r\n  styleUrls: ['./reset-password.component.scss']\r\n})\r\nexport class ResetPasswordComponent implements OnInit {\r\n  resetForm: FormGroup\r\n  isMatch: boolean = false\r\n  submited: boolean = false\r\n  public showPassword: boolean;\r\n  public showoldPassword: boolean;\r\n  public shownewPassword: boolean;\r\n  public showcomfirmPassword: boolean;\r\n  constructor(private modal: NgbModal, private resetPasswordService: resetPasswordService,\r\n    private OTPService: OTPService,private verifyPasswordService:verifyPasswordService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loadForm()\r\n  }\r\n  loadForm() {\r\n    this.resetForm = new FormGroup({\r\n      oldPassword: new FormControl(null, [Validators.required]),\r\n      newPassword: new FormControl(null, [Validators.required,Validators.minLength(5), ]),\r\n      // Validators.pattern('(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*?&])[A-Za-z\\d$@$!%*?&].{5,}')\r\n      confirmNewPassword: new FormControl(null, [Validators.required,Validators.minLength(5)]),\r\n\r\n    },\r\n    )\r\n\r\n  }\r\n \r\n  requestAuth() {\r\n    console.log(this.resetForm.valid)\r\n    if (this.resetForm.valid && this.isMatch) {\r\n      this.verifyPasswordService.save(this.resetForm.value).toPromise()\r\n        .then((res: any) => {\r\n          console.log(\"requestAuth\",res)\r\n          if(res){\r\n            let modalRef;\r\n            modalRef = this.modal.open(OtpModalComponent, { size: 'lg', backdrop: false });\r\n            modalRef.componentInstance.data = this.resetForm.value\r\n            modalRef.result.then(() => { }, (res) => {\r\n              console.log(res)\r\n              if (res) {\r\n                this.resetForm.reset()\r\n              }\r\n            })\r\n          }\r\n          }\r\n          \r\n        )\r\n\r\n\r\n\r\n    }\r\n\r\n  }\r\n  cancel() {\r\n    this.resetForm.reset()\r\n  }\r\n\r\n\r\n  isControlValid(controlName: string): boolean {\r\n    const control = this.resetForm.controls[controlName];\r\n    return control.valid && (control.dirty || control.touched);\r\n  }\r\n\r\n  isControlInvalid(controlName: string): boolean {\r\n    const control = this.resetForm.controls[controlName];\r\n    return control.invalid && (control.dirty || control.touched);\r\n  }\r\n\r\n  controlHasError(validation, controlName): boolean {\r\n    const control = this.resetForm.controls[controlName];\r\n    return control.hasError(validation) && (control.dirty || control.touched);\r\n  }\r\n\r\n  isControlTouched(controlName): boolean {\r\n    const control = this.resetForm.controls[controlName];\r\n    return control.dirty || control.touched;\r\n  }\r\n\r\n\r\n  confirmPassword() {\r\n    if (this.resetForm.value['newPassword'] != null && this.resetForm.value['confirmNewPassword'] != null) {\r\n      const password = this.resetForm.value['newPassword'];\r\n      const confirmPassword = this.resetForm.value['confirmNewPassword'];\r\n      var result = password === confirmPassword ? true : false;\r\n      return this.submited ? !result : false;\r\n    }\r\n    if (this.submited) {\r\n      return this.resetForm.controls['confirmNewPassword'].invalid\r\n    }\r\n  }\r\n\r\n\r\n  iscomfirmPassword(newPass, confirmNewPassword): any {\r\n    const newPassword = this.resetForm.controls[newPass];\r\n    const comfirmPassword = this.resetForm.controls[confirmNewPassword];\r\n\r\n    console.log(newPassword.value, comfirmPassword.value)\r\n\r\n    if (newPassword.value == comfirmPassword.value) {\r\n      this.isMatch = true\r\n      return comfirmPassword.hasError('Match') && (comfirmPassword.dirty || comfirmPassword.touched);\r\n    } else {\r\n      this.isMatch = false\r\n      return comfirmPassword.hasError('Not Match') && (comfirmPassword.dirty || comfirmPassword.touched);\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NgbModalModule, NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FormComponentModule } from '../form-component/form-component.module';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CRUDTableModule } from '../../_metronic/shared/crud-table';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { ResetPasswordComponent } from './reset-password.component';\r\nimport { NgxOtpInputModule } from 'ngx-otp-input';\r\nimport { OtpModalComponent } from './otp-modal/otp-modal.component';\r\n\r\n@NgModule({\r\n  declarations: [ResetPasswordComponent, OtpModalComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    NgbModalModule,\r\n    NgbModule,\r\n    MatDatepickerModule,\r\n    FormComponentModule,\r\n    NgxOtpInputModule,\r\n    CRUDTableModule,\r\n    RouterModule.forChild([\r\n      {\r\n        path: '',\r\n        component: ResetPasswordComponent,\r\n      },\r\n    ]),\r\n  ]\r\n})\r\nexport class ResetPasswordModule { }\r\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { environment } from \"../../../environments/environment\";\r\nimport { BizOperationService } from \"../../core/biz.operation.service\";\r\n\r\nconst API_RESET_PASSOWRD_URL = `${environment.apiUrl}/reset/password`;\r\nconst API_GET_OTP_URL = `${environment.apiUrl}/otp`;\r\nconst API_VERIFY_OTP_URL = `${environment.apiUrl}/verify/otp`;\r\nconst API_VERIFY_PASSWORD_URL = `${environment.apiUrl}/verify/password`;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class verifyPasswordService extends BizOperationService<any, number>{\r\n  constructor(protected httpClient: HttpClient) {\r\n    super(httpClient, API_VERIFY_PASSWORD_URL);\r\n  }\r\n  \r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class resetPasswordService extends BizOperationService<any, number>{\r\n  constructor(protected httpClient: HttpClient) {\r\n    super(httpClient, API_RESET_PASSOWRD_URL);\r\n  }\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OTPService extends BizOperationService<any, number>{\r\n  constructor(protected httpClient: HttpClient) {\r\n    super(httpClient, API_GET_OTP_URL);\r\n  }\r\n\r\n\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class VerifyOTPService extends BizOperationService<any, number>{\r\n  constructor(protected httpClient: HttpClient) {\r\n    super(httpClient, API_VERIFY_OTP_URL);\r\n  }\r\n\r\n\r\n}\r\n\r\n","export default \"<div class=\\\"modal-content\\\">\\r\\n    <div class=\\\"modal-header\\\">\\r\\n        <div class=\\\"modal-title h4 left-border-image\\\" id=\\\"example-modal-sizes-title-lg\\\">\\r\\n            Reset Password Verification\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"overlay overlay-block cursor-default modal-body\\\">\\r\\n        <div class=\\\"row\\\" style=\\\"text-align: center;\\\">\\r\\n            <div class=\\\"col-sm\\\">\\r\\n                <label class=\\\"col-sm-12 col-form-label text-bold\\\">Key in the One-Time Password generated on your phone.</label>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\" style=\\\"text-align: center;\\\">\\r\\n            <div class=\\\"col-sm\\\" style=\\\"    justify-content: center; display: flex;\\\">\\r\\n                <ngx-otp-input #ngOtpInput [config]=\\\"otpInputConfig\\\" (otpChange)=\\\"handeOtpChange($event)\\\" (fill)=\\\"handleFillEvent($event)\\\">\\r\\n                </ngx-otp-input>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\" style=\\\"text-align: center;\\\">\\r\\n            <div class=\\\"col-sm\\\">\\r\\n                <p>Don't get your OTP? <span *ngIf=\\\"requestStatus\\\">Request a new OTP in {{counter}} seconds.</span><span *ngIf=\\\"!requestStatus\\\" (click)=\\\"doRequest()\\\" style=\\\"color: #2C66FF;\\\">Request a new OTP.</span></p>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"modal-footer\\\">\\r\\n\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary btn-sm btn-elevate mr-2\\\" [disabled]=\\\"isSubmitted\\\" (click)=\\\"verifyOTP()\\\">\\r\\n            <span class=\\\"\\\">Submit</span>\\r\\n        </button>\\r\\n\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-light btn-sm btn-elevate\\\" (click)=\\\"cancel()\\\">\\r\\n            <span class=\\\"\\\">Cancel</span>\\r\\n        </button>\\r\\n    </div>\\r\\n</div>\";","export default \"<div class=\\\"row\\\" style=\\\"align-items: center;  justify-content: center;\\\">\\r\\n    <div class=\\\"col-8\\\">\\r\\n        <div class=\\\"card card-custom\\\" style=\\\"margin-bottom: 15px;\\\">\\r\\n            <div class=\\\"card-header\\\">\\r\\n                <div class=\\\"card-title\\\">\\r\\n                    <h3 class=\\\"card-label left-border-image\\\">Reset Password</h3>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"card-body \\\">\\r\\n                <form action=\\\"#\\\" class=\\\"form\\\" [formGroup]=\\\"resetForm\\\">\\r\\n                    <div class=\\\"row\\\" style=\\\"align-items: center;  justify-content: center;\\\">\\r\\n                        <div class=\\\"col-sm-12\\\">\\r\\n\\r\\n                            <div class=\\\"form-group row inner-addon left-addon\\\">\\r\\n                                <label class=\\\"col-sm-4 col-form-label\\\">Old Password</label>\\r\\n                                <div class=\\\"col-sm-8\\\">\\r\\n                                    <div class=\\\"input-group col-8 mx-auto\\\">\\r\\n                                        <input name=\\\"password\\\" [type]=\\\"showoldPassword ? 'text' : 'password'\\\" id=\\\"password-field\\\" class=\\\"pwd-control form-control form-control-sm \\\" name=\\\"oldPassword\\\" placeholder=\\\"Old Password\\\" autocomplete=\\\"off\\\" [class.is-invalid]=\\\"confirmPassword()\\\" [class.is-invalid]=\\\"iscomfirmPassword('newPassword','confirmNewPassword')\\\"\\r\\n                                            [class.is-invalid]=\\\"isControlInvalid('oldPassword')\\\" [class.is-valid]=\\\"isControlValid('oldPassword')\\\" formControlName=\\\"oldPassword\\\">\\r\\n                                        <i alt=\\\"show\\\" class=\\\"fas fa-eye eye-show\\\" (click)=\\\"showoldPassword = !showoldPassword\\\" [class.hide]=\\\"showoldPassword\\\"></i>\\r\\n                                        <i alt=\\\"hide\\\" class=\\\"fas fa-eye-slash eye-hide\\\" (click)=\\\"showoldPassword = !showoldPassword\\\" [class.hide]=\\\"!showoldPassword\\\"></i>\\r\\n                                    </div>\\r\\n\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"row\\\" style=\\\"align-items: center;  justify-content: center;\\\">\\r\\n                        <div class=\\\"col-sm-12\\\">\\r\\n                            <div class=\\\"form-group row inner-addon left-addon\\\">\\r\\n                                <label class=\\\"col-sm-4 col-form-label\\\">New Password</label>\\r\\n                                <div class=\\\"col-sm-8\\\">\\r\\n                                    <div class=\\\"input-group col-8 mx-auto\\\">\\r\\n                                        <input name=\\\"password\\\" [type]=\\\"shownewPassword ? 'text' : 'password'\\\" id=\\\"password-field\\\" class=\\\"pwd-control form-control form-control-sm \\\" name=\\\"newPassword\\\" placeholder=\\\"New Password\\\" autocomplete=\\\"off\\\" [class.is-invalid]=\\\"confirmPassword()\\\" [class.is-invalid]=\\\"iscomfirmPassword('newPassword','confirmNewPassword')\\\"\\r\\n                                            [class.is-invalid]=\\\"isControlInvalid('newPassword')\\\" [class.is-valid]=\\\"isControlValid('newPassword')\\\" formControlName=\\\"newPassword\\\">\\r\\n                                        <i alt=\\\"show\\\" class=\\\"fas fa-eye eye-show\\\" (click)=\\\"shownewPassword = !shownewPassword\\\" [class.hide]=\\\"shownewPassword\\\"></i>\\r\\n                                        <i alt=\\\"hide\\\" class=\\\"fas fa-eye-slash eye-hide\\\" (click)=\\\"shownewPassword = !shownewPassword\\\" [class.hide]=\\\"!shownewPassword\\\"></i>\\r\\n                                    </div>\\r\\n\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"row\\\" style=\\\"align-items: center;  justify-content: center;\\\">\\r\\n                        <div class=\\\"col-sm-12\\\">\\r\\n                            <div class=\\\"form-group row inner-addon left-addon\\\">\\r\\n                                <label class=\\\"col-sm-4 col-form-label\\\">Comfirm Password</label>\\r\\n                                <div class=\\\"col-sm-8\\\">\\r\\n                                    <div class=\\\"input-group col-8 mx-auto\\\">\\r\\n                                        <input name=\\\"password\\\" [type]=\\\"showcomfirmPassword ? 'text' : 'password'\\\" id=\\\"password-field\\\" class=\\\"pwd-control form-control form-control-sm \\\" name=\\\"comfirmPassword\\\" placeholder=\\\"Comfirm Password\\\" autocomplete=\\\"off\\\" [class.is-invalid]=\\\"confirmPassword()\\\"\\r\\n                                            [class.is-invalid]=\\\"iscomfirmPassword('newPassword','confirmNewPassword')\\\" [class.is-invalid]=\\\"isControlInvalid('confirmNewPassword')\\\" [class.is-valid]=\\\"isControlValid('confirmNewPassword')\\\" formControlName=\\\"confirmNewPassword\\\">\\r\\n                                        <i alt=\\\"show\\\" class=\\\"fas fa-eye eye-show\\\" (click)=\\\"showcomfirmPassword = !showcomfirmPassword\\\" [class.hide]=\\\"showcomfirmPassword\\\"></i>\\r\\n                                        <i alt=\\\"hide\\\" class=\\\"fas fa-eye-slash eye-hide\\\" (click)=\\\"showcomfirmPassword = !showcomfirmPassword\\\" [class.hide]=\\\"!showcomfirmPassword\\\"></i>\\r\\n                                        <div *ngIf=\\\"!isMatch\\\"><label class=\\\"error\\\">Password and confirm password does not match</label></div>\\r\\n\\r\\n                                    </div>\\r\\n\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"row\\\" style=\\\"align-items: center;  justify-content: flex-end; margin-top: 15px;\\\">\\r\\n                        <div class=\\\"col-sm-5\\\">\\r\\n                            <button type=\\\"button\\\" [disabled]=\\\"!isMatch || resetForm.invalid\\\" class=\\\"btn btn-sm btn-primary ml-2\\\" style=\\\"width: 100%;\\\" (click)=\\\"requestAuth()\\\">\\r\\n                                <span class=\\\"\\\">Request Authentication</span>\\r\\n                            </button>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-sm-3\\\">\\r\\n                            <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary ml-2\\\" style=\\\"width: 100%;\\\" (click)=\\\"cancel()\\\">\\r\\n                                <span class=\\\"\\\">Cancel</span>\\r\\n                            </button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </form>\\r\\n\\r\\n\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\";"],"names":[],"sourceRoot":"webpack:///"}